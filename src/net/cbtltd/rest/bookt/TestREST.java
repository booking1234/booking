
package net.cbtltd.rest.bookt;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.math.BigDecimal;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;

import net.cbtltd.rest.bookt.ArrayOfKeyValueOfdateTimedecimal.KeyValueOfdateTimedecimal;
import net.cbtltd.rest.bookt.ArrayOfKeyValueOfdateTimeint.KeyValueOfdateTimeint;
import net.cbtltd.rest.bookt.ArrayOfKeyValueOfstringstring.KeyValueOfstringstring;
import net.cbtltd.server.RazorServer;
import net.cbtltd.server.ServiceException;
import net.cbtltd.server.api.PartyMapper;
import net.cbtltd.server.api.RateMapper;
import net.cbtltd.server.api.ReservationMapper;
import net.cbtltd.shared.Error;
import net.cbtltd.shared.Party;
import net.cbtltd.shared.Reservation;
import net.cbtltd.shared.rate.RateNote;
import net.cbtltd.shared.rate.RateNoteTable;

import org.apache.ibatis.session.SqlSession;
import org.apache.log4j.Logger;

/**
 * This class was generated by Apache CXF 2.4.0
 * 2012-10-11T15:25:08.090+02:00
 * Generated source version: 2.4.0
 * 
 */
public final class TestREST {

    private static final QName SERVICE_NAME = new QName("https://connect.bookt.com/svc", "ConnectREST");
	public static final String APIKEY = "89eea03e-b659-474f-9fd3-8ab86240651b";
//	public static final String KISSIMMEE = "c6464e12-dced-4b6a-b28f-2db8d1c751b3";
	private static final Logger LOG = Logger.getLogger(A_Handler.class.getName());
	private static final ObjectFactory OF = new ObjectFactory();
	private static final DateFormat DF = new SimpleDateFormat("yyyy-MM-dd");

    private TestREST() {
    }

	/**
	 * The main method.
	 *
	 * @param args the arguments
	 * @throws Exception the exception
	 */
	public static void main(String args[]) throws Exception {
		URL wsdlURL = ConnectREST.WSDL_LOCATION;
		ConnectREST ss = new ConnectREST(wsdlURL, SERVICE_NAME);
        IConnectREST port = ss.getBasicHttpBindingIConnectREST();  
//		IConnectREST port = ss.getIConnectREST();  
		SqlSession sqlSession = RazorServer.openSession();

		try {
			LOG.debug("Start Bookt");
			if (false) {
				LOG.debug("Invoking getLead...");
				String rq = "";
				Boolean useInternalID = true;
				Person rs = port.getLead(APIKEY, rq, useInternalID);
				LOG.debug("getLead rs=" + rs);
			}
			if (false) {
				LOG.debug("Invoking createLead...");
				Person rq = getPerson(sqlSession, "5");
				Integer mode = null;
				Person rs = port.createLead(APIKEY, rq, mode);
				LOG.debug("createLead rs=" + rs);
			}
			if (false) {
				LOG.debug("Invoking createEvent...");
				Event rq = OF.createEvent();
				//TODO:
				Reservation reservation = sqlSession.getMapper(ReservationMapper.class).read("5");
				rq.setAddedOn(getXGC(reservation.getDate()));
				rq.setAltID(OF.createString(reservation.getName()));
				rq.setCheckIn(getXGC(reservation.getFromdate()));
				rq.setCheckOut(getXGC(reservation.getTodate()));
				rq.setCompletedOn(getXGC(reservation.getDonedate()));
				rq.setID(Integer.valueOf(reservation.getId())); //TODO: map
				rq.setMessage(OF.createString(reservation.getNotes()));
				rq.setMessageFormat(OF.createString("HTML"));
				rq.setNumAdults(Integer.valueOf(reservation.getAdult()));
				rq.setNumChildren(reservation.getChild());
				rq.setPropertyID(OF.createString(reservation.getProductid())); //TODO map
//				rq.setStatement(OF.createBookingStatement(getStatement(sqlSession, reservation)));
				rq.setStatus(OF.createString(reservation.getState())); //TODO map
				//?rq.setSubject(OF.createString(reservation.getSubject()));
				//?rq.setType(OF.createString(reservation.getType()));
				rq.setUnitID(OF.createString(reservation.getUnit()));
				LOG.debug("createEvent rq =" + rq);

				Integer mode = null;
				Event rs = port.createEvent(APIKEY, rq, mode);
				LOG.debug("createEvent rs=" + rs);
			}
			if (false) {
				LOG.debug("Invoking getBooking...");
				String rq = "";
				Boolean _useInternalID = null;
				LOG.debug("getBooking.rq=" + rq);
				Booking rs = port.getBooking(APIKEY, rq, _useInternalID);
				LOG.debug("getBooking rs=" + rs);
			}
			if (false) {
				LOG.debug("Invoking getPropertyIDsByCategory...");
				String rq = "Undefined";
				LOG.debug("getPropertyIDsByCategory.rq=" + rq);
				ArrayOfint rs = port.getPropertyIDsByCategory(APIKEY, rq);
				List<Integer> propertyids = rs.getInt();
				LOG.debug("getPropertyIDsByCategory rs=" + rs + "\n" + propertyids);
			}
			if (false) {
				LOG.debug("Invoking getAvailability...");
				Integer propertyID = 12591; //12593; //24233; //24232; //24248;
				String rateType = "";
				Date startDate = DF.parse("2013-02-01");
				Date endDate = DF.parse("2013-06-33");
				LOG.debug("getAvailability rs=" + propertyID + ", " + rateType + ", " + startDate + ", " + endDate);
				ArrayOfKeyValueOfdateTimeint rs = port.getAvailability(APIKEY, propertyID, rateType, getXGC(startDate), getXGC(endDate));
				LOG.debug("getAvailability rs=" + rs);

				List<KeyValueOfdateTimeint> availability = rs.getKeyValueOfdateTimeint();
				if (availability == null || availability.isEmpty()) {LOG.debug("getAvailability.kv=empty");}
				else {
					for (KeyValueOfdateTimeint available : availability) {
						LOG.debug("getAvailability rs=" + available.toString());
					}
				}
			}
			if (false) {
				LOG.debug("Invoking getEventCategories...");
				ArrayOfstring rs = port.getEventCategories(APIKEY);
				LOG.debug("getEventCategories rs=" + rs);
			}
			if (false) {
				LOG.debug("Invoking createReview...");
				RateNoteTable action = new RateNoteTable();
				action.setProductid("productid");
				action.setOrderby("date");
				action.setStartrow(0);
				action.setNumrows(Integer.MAX_VALUE);
				List<RateNote> rates = sqlSession.getMapper(RateMapper.class).review(action);
				if (rates != null && !rates.isEmpty()) {
					for (RateNote rate : rates) {
						Review rq = OF.createReview();
						rq.setAltID(OF.createString(rate.getId()));
						rq.setComment(OF.createString(rate.getNotes()));
						//? rq.setExternalLink(OF.createString(rate.getLink()));
						rq.setID(Integer.valueOf(rate.getId()));//TODO: map 
						rq.setRating(Integer.valueOf(rate.getRating().toString()));
						//? rq.setResponse(rate.getResponse());
						rq.setReviewedEntityID(OF.createString(action.getProductid()));
						rq.setSource(OF.createString(rate.getCustomerid()));
						rq.setStatus(OF.createString(rate.getName()));
						rq.setSubmissionDate(getXGC(rate.getDate()));
						rq.setTitle(OF.createString(rate.getName()));
						rq.setType(OF.createString(rate.getType())); //TODO: map
						LOG.debug("createReview.rq=" + rq);
						Review rs = port.createReview(APIKEY, rq);
						LOG.debug("createReview rs=" + rs);
					}
				}

			}
			if (false) {
				LOG.debug("Invoking getPropertyCategories...");
				ArrayOfstring rs = port.getPropertyCategories(APIKEY);
				List<String> categories = rs.getString();
				LOG.debug("getPropertyCategories rs=" + rs + "\n" + categories);
			}
			if (false) {
				LOG.debug("Invoking getBusinessRules...");
				ArrayOfKeyValueOfstringstring rs = port.getBusinessRules(APIKEY);
				LOG.debug("getBusinessRules rs=" + rs);
				List<KeyValueOfstringstring> rules = rs.getKeyValueOfstringstring();
				for (KeyValueOfstringstring rule : rules) {
					rule.getKey();
					rule.getValue();
				}
			}
			if (false) {
				LOG.debug("Invoking setRatesAndAvailability...");
				Integer propertyID = null;
				String rateType = "";
				Integer los = null;
				ArrayOfdateTime effDates = null;
				ArrayOfdecimal rates = null;
				String currency = "";
				ArrayOfint numAvailabile = null;
				port.setRatesAndAvailability(APIKEY, propertyID, rateType, los, effDates, rates, currency, numAvailabile);
			}
			if (false) {
				LOG.debug("Invoking getEvent...");
				String eventid = "";
				Boolean useInternalID = null;
				LOG.debug("getEvent.rq=" + eventid);
				Event rs = port.getEvent(APIKEY, eventid, useInternalID);
				LOG.debug("getEvent rs=" + rs);
			}
			if (false) {
				LOG.debug("Invoking setRates...");
				Integer propertyID = null;
				String rateType = "";
				Integer los = null;
				ArrayOfdateTime effDates = null;
				ArrayOfdecimal rates = null;
				String currency = "";
				LOG.debug("setRates.rq=" + propertyID + ", " + rateType + ", " + los + ", " + effDates + ", " + rates + ", " + currency);
				port.setRates(APIKEY, propertyID, rateType, los, effDates, rates, currency);
			}
			if (false) {
				LOG.debug("Invoking getRates...");
				Integer propertyID = 12591; //12593; //24233; //24232; //24248;
				String rateType = null;
				Integer los = 1;
				Date startDate = DF.parse("2013-04-01");
				Date endDate = DF.parse("2013-12-31");
				String currency = "USD";
				LOG.debug("getRates.rq API Key = " + APIKEY + " propertyID=" + propertyID + ", rateType=" + rateType + ", los=" + los + ", startDate=" + getXGC(startDate) + ", endDate=" + getXGC(endDate) + ", currency=" + currency);
				ArrayOfKeyValueOfdateTimedecimal rs = port.getRates(APIKEY, propertyID, rateType, los, getXGC(startDate), getXGC(endDate), currency);
				LOG.debug("getRates rs=" + rs);
				List<KeyValueOfdateTimedecimal> rates = rs.getKeyValueOfdateTimedecimal();
				if (rates == null || rates.isEmpty()) {LOG.debug("getRates.kv=" + rates.size());}
				else {
					for (KeyValueOfdateTimedecimal rate : rates) {
						LOG.debug("getRates.kv=" + rate.toString());
					}
				}
			}
			if (false) {
				LOG.debug("Invoking cancelBooking...");
				String bookingID = "";
				Boolean useInternalID = null;
				Double refundAmount = 0.0;
				Integer options = null;
				Booking rs = port.cancelBooking(APIKEY, bookingID, useInternalID, getBigDecimal(refundAmount), options);
				LOG.debug("cancelBooking rs=" + rs);
			}
			if (false) {
				LOG.debug("Invoking getReviews...");
				String id = "";
				String reviewType = "";
				Boolean useInternalID = null;
				ArrayOfReview rs = port.getReviews(APIKEY, id, reviewType, useInternalID);
				LOG.debug("getReviews rs=" + rs);
			}
			if (true) {
				LOG.debug("Invoking getProperty...");
				String id = "24245"; //24245
				String useInternalID = "true";
				Property rs = port.getProperty(APIKEY, id, useInternalID);
				LOG.debug("getProperty rs " + rs);
			}
			if (false) {
				LOG.debug("Invoking modifyBooking...");
				Reservation reservation = sqlSession.getMapper(ReservationMapper.class).read("1");
				Booking rq = null;//getBooking(sqlSession, reservation);
				Integer options = null;
				LOG.debug("modifyBooking.rq=" + rq + ", " + options);
//				Booking rs = port.modifyBooking(APIKEY, rq, options);
//				LOG.debug("modifyBooking rs=" + rs);
			}
			if (false) {
				LOG.debug("Invoking getReviewIDs...");
				String reviewType = "";
				Date lastMod = null;
				Boolean useInternalID = null;
				ArrayOfstring rs = port.getReviewIDs(APIKEY, reviewType, getXGC(lastMod), useInternalID);
				LOG.debug("getReviewIDs rs=" + rs);
			}
			if (false) {
				LOG.debug("Invoking makeBooking...");
				Reservation reservation = sqlSession.getMapper(ReservationMapper.class).read("1420529");
				Booking rq = null; //getBooking(sqlSession, reservation);
				Boolean infoOnly = false;
				Booking rs = port.makeBooking(APIKEY, rq, infoOnly);
				LOG.debug("makeBooking rs=" + rs);
			}
			if (false) {
				LOG.debug("Invoking getReview...");
				String rq = "";
				Boolean useInternalID = null;
				LOG.debug("getReview.rq=" + rq);
				Review rs = port.getReview(APIKEY, rq, useInternalID);
				LOG.debug("getReview rs=" + rs);
			}
			if (false) {
				LOG.debug("Invoking setAvailability...");
				Integer propertyID = null;
				ArrayOfdateTime effDates = null;
				ArrayOfint numAvailabile = null;
				port.setAvailability(APIKEY, propertyID, effDates, numAvailabile);
			}
			if (false) {
				LOG.debug("Invoking getPropertyIDs...");
				String lastMod = "2010-07-01T00:00:00";
				ArrayOfint rs = port.getPropertyIDs(APIKEY, lastMod);
				List<Integer> propertyids = rs.getInt();
				LOG.debug("getPropertyIDs rs=" + rs + "\n" + propertyids);
			}
			if (false) {
				LOG.debug("Invoking deleteReview...");
				String id = "";
				Boolean useInternalID = null;
				String rs = port.deleteReview(APIKEY, id, useInternalID);
				LOG.debug("deleteReview rs=" + rs);
			}
			sqlSession.commit();
		} 
		catch (Throwable x) {
			sqlSession.rollback();
			x.printStackTrace();
		} 
		finally {sqlSession.close();}
		LOG.debug("Finish Bookt");
		System.exit(0);
	}

	private static final Person getPerson(SqlSession sqlSession, String partyid) {
		Party party = sqlSession.getMapper(PartyMapper.class).read(partyid);
		if (party == null) {throw new ServiceException(Error.party_id, partyid);}
		Person person = OF.createPerson();
		person.setAddress1(OF.createPersonAddress1(party.getLocalAddress()));
		person.setAddress2(OF.createPersonAddress2(party.getRegion()));
		person.setAltID(OF.createPersonAltID(party.getId()));
		person.setCellPhone(OF.createPersonCellPhone(party.getMobilephone()));
		person.setCity(OF.createPersonCity(party.getCity()));
		person.setCompany(OF.createPersonCompany(party.getEmployerid()));
		person.setCountry(OF.createPersonCountry(party.getCountry()));
		person.setFaxNumber(OF.createPersonFaxNumber(party.getFaxphone()));
		person.setFirstName(OF.createPersonFirstName(party.noFirstName() ? party.getName() : party.getFirstName()));
		person.setGreeting(OF.createPersonGreeting("Mr"));
		person.setHomePhone(OF.createPersonHomePhone(party.getNightphone()));
		person.setAltID(OF.createString(party.getId()));
		//?person.setInitial(OF.createString(party.getInitial()));
		person.setLastName(OF.createPersonLastName(party.noFamilyName() ? party.getName() : party.getFamilyName()));
		person.setLatitude(getBigDecimal(party.getLatitude()));
		person.setLongitude(getBigDecimal(party.getLongitude()));
		person.setLeadSource(OF.createPersonLeadSource(party.getCreatorid()));
		person.setNotes(OF.createPersonNotes(party.getNotes())); //use text
		person.setPostalCode(OF.createPersonPostalCode(party.getPostalcode()));
//		person.setPrefix(OF.createPersonPrefix(party.getPrefix()));
		person.setPrimaryEmail(OF.createPersonPrimaryEmail(party.getEmailaddress()));
//		person.setState(OF.createPersonState(party.getRegion()));
		person.setStatus(OF.createPersonStatus(party.getState()));
//		person.setSuffix(OF.createPersonSuffix(party.getSuffix()));
		ArrayOfstring tags = OF.createArrayOfstring();
		//TODO tags
		person.setTags(OF.createArrayOfstring(tags));
		person.setTitle(OF.createPersonTitle("Mr"));
		person.setType(OF.createPersonType(party.getType())); //TODO: map
		person.setWebSite(OF.createPersonWebSite(party.getWebaddress()));
		person.setWorkPhone(OF.createPersonWorkPhone(party.getDayphone()));
		return person;
	}

	protected static BigDecimal getBigDecimal(Double value) {
		if (value == null) {return null;}
		else {return new BigDecimal(String.valueOf(value));}
	}

	protected static final XMLGregorianCalendar getXGC (Date date) {
		XMLGregorianCalendar xgc = null;
		try {
			xgc = DatatypeFactory.newInstance().newXMLGregorianCalendar();
			Calendar cal = Calendar.getInstance();
			cal.setTime(date);
			xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
			xgc.setMonth(cal.get(Calendar.MONTH)+1); // +1 because XMLGregorianCalendar is from 1 to 12 while Calendar.MONTH is from 0 to 11 !!!
			xgc.setYear(cal.get(Calendar.YEAR));
			xgc.setTime(cal.get(Calendar.HOUR_OF_DAY), cal.get(Calendar.MINUTE), cal.get(Calendar.SECOND));
			//GregorianCalendar c = xgc.toGregorianCalendar();
			//Date fecha = c.getTime();
			//java.sql.Date fechaSQL = new java.sql.Date(fecha.getTime());
		} 
		catch (DatatypeConfigurationException e) {throw new ServiceException(Error.date_format, date.toString());}
		return xgc;
	}
}
