package net.cbtltd.rest.ciirus;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;

import net.cbtltd.server.RazorServer;
import net.cbtltd.server.ServiceException;
import net.cbtltd.server.api.PartnerMapper;
import net.cbtltd.server.script.Handleable;
import net.cbtltd.shared.Currency;
import net.cbtltd.shared.Error;
import net.cbtltd.shared.Partner;
import net.cbtltd.shared.Reservation;
import net.cbtltd.shared.Reservation.State;
import net.cbtltd.shared.finance.gateway.CreditCard;
import net.cbtltd.shared.finance.gateway.CreditCardType;

import org.apache.ibatis.session.SqlSession;

/**
 * This class was generated by Apache CXF 2.4.0 2012-08-23T11:53:42.957+02:00
 * Generated source version: 2.4.0
 * 
 */
public final class _Test implements Handleable {
	
	private String altpartyid;
	
	public	_Test(String altpartyid){
		this.altpartyid = altpartyid;
	}

	public _Test() {}
	
	public static void main(String args[]) throws Exception {
		System.out.println("Ciirus Test Started");
		SqlSession sqlSession = RazorServer.openSession();
		try {
//			String altpartyid = "120523"; // Ciirus test manager
//			String altpartyid = "270197"; // Orlando localhost (Ciirus)
//			String altpartyid = "270204"; // Orlando Villa Management
			String altpartyid = "270198"; // Floriwood localhost (Ciirus)
			
//			String reservationid = "2637616"; // Ciirus test reservation

			Partner partner = sqlSession.getMapper(PartnerMapper.class).exists(altpartyid);
			if (partner == null) {
				throw new ServiceException(Error.party_id, altpartyid);
			}
			A_Handler handler = new A_Handler(partner);
//			if (handler == null) {
//				throw new ServiceException(Error.service_absent, "Handler for " + altpartyid);
//			}
//			handler.readProducts();
//			handler.readImages();
//			 handler.readPrices();
			 handler.readSchedule();
			// Reservation reservation =
			// sqlSession.getMapper(ReservationMapper.class).read(reservationid);
			
//			Reservation reservation = createReservation();
//			CreditCard creditCard = new CreditCard();
//			creditCard.setNumber("4444333322221111");
//			creditCard.setType(CreditCardType.VISA);
//			creditCard.setMonth("8");
//			creditCard.setYear("2016");
//			creditCard.setSecurityCode("123");
			
//			handler.readPrice(sqlSession, reservation, "33674", Currency.Code.USD.name());
//			Map<String,String> createResAndPaymentResult = handler.createReservationAndPayment(sqlSession, reservation, creditCard);
			

//			handler.createReservation(sqlSession, reservation);

//			handler.cancelReservation(sqlSession, reservation);
//			
//			System.out.println("isAvailable = " + handler.isAvailable(sqlSession, reservation));
			// sqlSession.commit();
		} catch (Throwable x) {
			sqlSession.rollback();
			System.out.println(x.getMessage());
		} finally {
			sqlSession.close();
		}
		System.out.println("Ciirus Terminated");
		System.exit(0);
	}

	public static Reservation createReservation() throws ParseException {
//		String productid = "58625"; //this is AltId -> Ciirus property 49410
		String productid = "61190"; //this is AltId -> Ciirus property 33674
		
		DateFormat DF = new SimpleDateFormat("yyyy-MM-dd");
		Date fromdate = DF.parse("2015-07-07");
		Date todate = DF.parse("2015-07-09");
//		String customerid = "264637";//with state
		String customerid = "270060";//without state
		
		Reservation reservation = new Reservation();
		reservation.setProductid(productid);
		reservation.setAgentid(customerid);

		reservation.setFromdate(fromdate);
		reservation.setTodate(todate);
		
		reservation.setCustomerid(customerid);
		reservation.setState(State.Provisional.name());
		reservation.setId("28");//one reservationID
		reservation.setAltid("1795421");//one Ciirus reservation
//		reservation.setAltid("837326");//one Ciirus reservation
		reservation.setCurrency(Currency.Code.USD.name());
		reservation.setAdult(2);

		return reservation;
	}

	private A_Handler getHandler() {
		SqlSession sqlSession = RazorServer.openSession();
//		String altpartyid = "120523";
		Partner partner = sqlSession.getMapper(PartnerMapper.class).exists(altpartyid);
		if (partner == null) {
			throw new ServiceException(Error.party_id, altpartyid);
		}
		A_Handler handler = new A_Handler(partner);
		return handler;
	}

	@Override
	public void readProducts() {
		getHandler().readProducts();
	}

	@Override
	public void readPrices() {
		getHandler().readPrices();
	}

	@Override
	public void readSchedules() {
		getHandler().readSchedule();
	}

	@Override
	public void readAlerts() {
		getHandler().readAlerts();
	}

	@Override
	public void readSpecials() {
		getHandler().readSpecials();
	}

	@Override
	public void readLocations() {
		getHandler().readLocations();
	}

	@Override
	public void readDescriptions() {
		getHandler().readDescriptions();
	}

	@Override
	public void readImages() {
		getHandler().readImages();

	}

}
