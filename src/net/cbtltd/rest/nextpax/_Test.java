package net.cbtltd.rest.nextpax;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.util.ArrayList;

import net.cbtltd.server.RazorServer;
import net.cbtltd.server.ServiceException;
import net.cbtltd.server.api.AttributeMapper;
import net.cbtltd.server.api.PartnerMapper;
import net.cbtltd.server.api.ReservationMapper;
import net.cbtltd.server.script.Handleable;
import net.cbtltd.shared.Error;
import net.cbtltd.shared.NameId;
import net.cbtltd.shared.Partner;
import net.cbtltd.shared.Reservation;

import org.apache.ibatis.session.SqlSession;
import org.apache.log4j.Logger;

/**
 * This class was generated by Apache CXF 2.4.0 2012-08-09T13:20:11.648+02:00
 * Generated source version: 2.4.0
 * 
 */
public final class _Test implements Handleable {

	private String altpartyid;

	public _Test(String altpartyid) {
		this.altpartyid = altpartyid;
	}

	public _Test() {
	}

	private static final Logger LOG = Logger.getLogger(_Test.class.getName());

	/**
	 * The main test method.
	 * 
	 * @param args the arguments
	 * @throws Exception the exception
	 */
	public static void main(String args[]) throws Exception {
		LOG.error("NextPax Started");
		SqlSession sqlSession = RazorServer.openSession();
		try {
			

//			String altpartyid = "179769"; // NextPax
//			String altpartyid = "179799"; // NextPax partner Novasol
//			String altpartyid = "179804"; // NextPax partner Vacasol
//			String altpartyid = "179882"; // NextPax partner Bungalow Net
			//String altpartyid = "179802"; // NextPax partner TUI Ferienhaus UAT
			String altpartyid = "231051"; // NextPax partner TUI Ferienhaus PROD
			String reservationid = "4937617"; // NextPax reservation
		
		
			Partner partner = sqlSession.getMapper(PartnerMapper.class).exists(altpartyid);
			if (partner == null) {
				throw new ServiceException(Error.party_id, altpartyid);
			}
			A_Handler handler = new A_Handler(partner);
			
			// handler.readProducts();
			// handler.readPrices();
			// handler.readSchedule(); // where the pricing is done.
			// handler.createImages();
			// handler.readImages();
			// handler.readAlerts();
			
			// Reservation reservation = sqlSession.getMapper(ReservationMapper.class).read(reservationid);
			// Product product = sqlSession.getMapper(ProductMapper.class).read(reservation.getProductid());
			// System.out.println("isAvailable = " + handler.isAvailable(sqlSession, reservation, product.getAltid()));

			// Reservation reservation = new Reservation();
			// reservation.setProductid("56810");
			// reservation.setId("173");
			// reservation.setAdult(1);
			// DateFormat DF = new SimpleDateFormat("yyyy-MM-dd");
			// reservation.setFromdate(DF.parse("2014-04-24"));
			// reservation.setTodate(DF.parse("2014-05-11")); //17 days.
			// reservation.setState("Briefed");
			// reservation.setAgentid("3330");
			// handler.createReservation(sqlSession, reservation);
			// handler.readReservation(sqlSession, reservation);
			// handler.updateReservation(sqlSession, reservation);
			// handler.cancelReservation(sqlSession, reservation);
			//handler.testCreateOrUpdateProducts();
			
			String srcs[] = {
				"c:\\parsing\\paxgenerator_house_additional_costs_ih.xml",
				"c:\\parsing\\paxgenerator_house_additional_costs_ns.xml",
				"c:\\parsing\\paxgenerator_house_additional_costs_vc.xml",
				"c:\\parsing\\paxgenerator_house_additional_costs_tu.xml",
			};
			String dests[] = {
				"c:\\parsing\\fees_ih.xml",
				"c:\\parsing\\fees_ns.xml",
				"c:\\parsing\\fees_vc.xml",
				"c:\\parsing\\fees_tu.xml",
			};
			String destsUnique[] = {
				"c:\\parsing\\fees_unique_ih.xml",
				"c:\\parsing\\fees_unique_ns.xml",
				"c:\\parsing\\fees_unique_vc.xml",
				"c:\\parsing\\fees_unique_tu.xml",
			};
			
		//	handler.extractAdditionalFees(srcs, dests);
			
		//	handler.extractUniqueAdditionalFees(srcs, destsUnique);
			
		handler.readFees();
		//	handler.readAlerts();

			// testAttribute(sqlSession);
			// sqlSession.commit();
		} catch (Throwable x) {
			sqlSession.rollback();
			x.printStackTrace();
		} finally {
			sqlSession.close();
		}
		LOG.error("NextPax Terminated not an error. ");
		System.exit(0);
	}

	private A_Handler getHandler() {
		SqlSession sqlSession = RazorServer.openSession();
		// String altpartyid = "179769";
		Partner partner = sqlSession.getMapper(PartnerMapper.class).exists(altpartyid);
		if (partner == null) {
			throw new ServiceException(Error.party_id, altpartyid);
		}
		A_Handler handler = new A_Handler(partner);
		return handler;
	}

	private A_Handler setHandler(String altpartyid) {
		SqlSession sqlSession = RazorServer.openSession();
		// String altpartyid = "179769";
		Partner partner = sqlSession.getMapper(PartnerMapper.class).exists(altpartyid);
		if (partner == null) {
			throw new ServiceException(Error.party_id, altpartyid);
		}
		A_Handler handler = new A_Handler(partner);
		return handler;
	}

	@Override
	public void readProducts() {
		getHandler().readProducts();
	}

	@Override
	public void readPrices() {
		getHandler().readPrices();
	}

	@Override
	public void readSchedules() {
		getHandler().readSchedule();
	}

	@Override
	public void readAlerts() {
		getHandler().readAlerts();
	}

	// public void createImages() {
	// getHandler().createImages();
	// }

	@Override
	public void readSpecials() {
		getHandler().readSpecials();
	}

	public static void testAttribute(SqlSession sqlSession) {
		ArrayList<String> attributes = new ArrayList<String>();
		attributes.add("PCT3");
		ArrayList<NameId> pctList = sqlSession.getMapper(AttributeMapper.class)
				.pctListValue(new net.cbtltd.shared.Attribute("PCT", attributes.get(0).substring("PCT".length())));
		for (NameId attribute : pctList) {
			System.out.println("Attribute name: " + attribute.getName());
		}
	}

	@Override
	public void readLocations() {
		throw new ServiceException(Error.service_absent, "Nextpax readLocations()");
	}

	@Override
	public void readDescriptions() {
		getHandler().readDescriptions();
	}

	@Override
	public void readImages() {
		getHandler().readImages();
	}
}
