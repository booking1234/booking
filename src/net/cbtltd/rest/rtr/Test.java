
package net.cbtltd.rest.rtr;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import net.cbtltd.server.RazorServer;
import net.cbtltd.server.api.PartyMapper;
import net.cbtltd.server.project.PartyIds;
import net.cbtltd.shared.NameId;
import net.cbtltd.shared.Party;
import net.cbtltd.shared.Product;
import net.cbtltd.shared.api.HasUrls;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.ibatis.session.SqlSession;
import org.apache.log4j.Logger;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

//import com.thoughtworks.xstream.XStream;
//import com.thoughtworks.xstream.io.xml.StaxDriver;

/**
 * This class was generated by Apache CXF 2.4.0
 * 2012-07-01T12:13:31.560+02:00
 * Generated source version: 2.4.0
 * 
 * @see Giorgi Stoynev gstoynev@realtimerental.com 
 * @see https://mail.google.com/mail/u/0/?ui=2&shva=1#inbox/1382a5d76e056793
 * @see http://cxf.apache.org/docs/transformationfeature.html
 * @see http://xstream.codehaus.org/index.html
 * 
 * FIX FOR javax.xml.bind.UnmarshalException: unexpected element (uri:""...)
 * PUT NAMESPACE IN @XmlRootElement(name = "...", namespace="")
 * 
 * Your authentication key, which will be sent separately, has been authorized for:
 * http://172.16.96.52/webservice/RTRWSAPI.asmx?op=HelloWorld (no restriction, but will trigger throttling if overused)
 * http://172.16.96.52/webservice/RTRWSAPI.asmx?op=RTRCustomDistributionCatalog   (restricted to two calls every 24 hours)
 * http://172.16.96.52/webservice/RTRWSAPI.asmx?op=RTRPropertyAvailability (no restriction, but will trigger throttling if overused)
 * http://172.16.96.52/webservice/RTRWSAPI.asmx?op=RTRPropertyInformation (no restriction, but will trigger throttling if overused)
 * Please note that actual inventory has not been attached to your authentication key yet. I expect that to happen within 24 hours.
 */
public final class Test {

	private static final Logger LOG = Logger.getLogger(Test.class.getName());
	private static final QName SERVICE_NAME = new QName("http://realtimerental.com/webservice", "RTRWSAPI");
	private static final String APIKEY = "D5CAC6CC-E290-4463-9BBD-B621D99A2C4B";

	private static final ObjectFactory OF = new ObjectFactory();
	
	/**
	 * Gets the Razor party ID for the KIGO ID.
	 *
	 * @param sqlSession the current SQL session.
	 * @param altid the foreign ID
	 * @return the party ID
	 */
	private static Party getParty(SqlSession sqlSession, String altid) {
		Party party = sqlSession.getMapper(PartyMapper.class).altread(new NameId(PartyIds.PARTY_RTR_ID, altid));
		return party == null ? new Party() : party;
	}


	private Test() {}

	public static void main(String args[]) throws Exception {
		URL wsdlURL = RTRWSAPI.WSDL_LOCATION;
		if (args.length > 0) { 
			File wsdlFile = new File(args[0]);
			try {
				if (wsdlFile.exists()) {
					wsdlURL = wsdlFile.toURI().toURL();
				} else {
					wsdlURL = new URL(args[0]);
				}
			} catch (MalformedURLException e) {
				e.printStackTrace();
			}
		}

		RTRWSAPI ss = new RTRWSAPI(wsdlURL, SERVICE_NAME);
		RTRWSAPISoap port = ss.getRTRWSAPISoap();
 
		SqlSession sqlSession = RazorServer.openSession();

		if (false) {
			//<RTRPropertyInfoRequest 
			//PropertyReferenceID='123456' 
			//PropertyDetails='true'
			//BrokerInformation='true' 
			//AvailabilityInformation='true'
			//RateInformation='true' 
			//PhotoInformation='true '
			//AmenityInformation='true' />
			// (note:change 123456 to the Reference ID of the property for which you want information.)			
			System.out.println("Invoking rtrPropertyInformation...");
			String propertyReferenceID = "1028";
			String rq = "<RTRPropertyInfoRequest PropertyReferenceID='" + propertyReferenceID + "' PropertyDetails='true' BrokerInformation='true' AvailabilityInformation='true' RateInformation='true' PhotoInformation='true' AmenityInformation='true' />";
			String rs = port.rtrPropertyInformation(APIKEY, rq);
			System.out.println("rtrPropertyInformation rs=" + rs);
			PrintWriter out = new PrintWriter(new FileWriter("C:\\rtrPropertyInformation.xml"));
			out.print(rs);
			out.close();
		}
		if (true) {
			System.out.println("Invoking rtrPropertyAvailability...");

			try {
				// Create request XML string
				XMLOutputter outputter = new XMLOutputter();
				org.jdom.Element root = new org.jdom.Element("RTRBookingRequest");
				root.setAttribute("Version", String.valueOf(3));
				org.jdom.Element bookingRequest = new org.jdom.Element("BookingRequest");
				root.addContent(bookingRequest);
				bookingRequest.setAttribute("PropertyReferenceID", String.valueOf(1462));
				bookingRequest.setAttribute("RequestType", "AvailabilityInformation");
				bookingRequest.setAttribute("CheckInDate", "2012-10-01");
				bookingRequest.setAttribute("CheckOutDate", "2012-10-15");
				bookingRequest.setAttribute("GuestCount", String.valueOf(3));
				bookingRequest.setAttribute("CouponCode", "");
				ByteArrayOutputStream os = new ByteArrayOutputStream();
				outputter.output(root, os);
				String rq = os.toString();
				System.out.println(rq);
				//outputter.output(root, System.out);       
				String rs = port.rtrPropertyAvailability(APIKEY, rq);
				System.out.println("rtrPropertyAvailability rs=" + rs);

				// Parse response XML string
				SAXBuilder builder = new SAXBuilder();
				org.jdom.Document document = builder.build(new StringReader(rs));
				root = document.getRootElement();
				String status = root.getAttributeValue("Status");
				Boolean available = "Available".equalsIgnoreCase(status);
				System.out.println("rtrPropertyAvailability available=" + status + " " + available);
			}
			catch (IOException e) {
				System.err.println(e);
			}

		}
		if (false) {
			System.out.println("Invoking rtrRentalHistory...");
			String startDate = "";
			String endDate = "";
			String rs = port.rtrRentalHistory(APIKEY, startDate, endDate);
			System.out.println("rtrRentalHistory rs=" + rs);
		}
		if (false) {
			System.out.println("Invoking rtrHoldToReservation...");
			String rq = "";
			String rs = port.rtrHoldToReservation(APIKEY, rq);
			System.out.println("rtrHoldToReservation rs=" + rs);
		}
		if (false) {
			System.out.println("Invoking rtrPropertyCatalog...");
			String rs = port.rtrPropertyCatalog(APIKEY);
			System.out.println("rtrPropertyCatalog rs=" + rs);
		}
		if (false) {
			System.out.println("Invoking helloWorld...");
			String rs = port.helloWorld(APIKEY);
			System.out.println("helloWorld rs=" + rs);
		}
		if (false) {
			System.out.println("Invoking rtrCancelBooking...");
//			String rq = "";
//			String rs = port.rtrCancelBooking(APIKEY, rq);
//			System.out.println("rtrCancelBooking rs=" + rs);
			// Create request XML string
			XMLOutputter outputter = new XMLOutputter();
			org.jdom.Element root = new org.jdom.Element("RTRBookingRequest");
			root.setAttribute("Version", String.valueOf(3));
			org.jdom.Element bookingRequest = new org.jdom.Element("BookingRequest");
			root.addContent(bookingRequest);
			bookingRequest.setAttribute("PropertyReferenceID", String.valueOf(1462));
			bookingRequest.setAttribute("RequestType", "Cancel");
			bookingRequest.setAttribute("LeaseID", "1234");
			ByteArrayOutputStream os = new ByteArrayOutputStream();
			outputter.output(root, os);
			String rq = os.toString();
			System.out.println(rq);
			//outputter.output(root, System.out);       
			String rs = port.rtrCancelBooking(APIKEY, rq);
			System.out.println("rtrCancelBooking rs=" + rs);

			// Parse response XML string
			SAXBuilder builder = new SAXBuilder();
			org.jdom.Document document = builder.build(new StringReader(rs));
			root = document.getRootElement();
			String status = root.getAttributeValue("Status");
			Boolean canceled = "Canceled".equalsIgnoreCase(status);
			System.out.println("rtrCancelBooking canceled=" + status + " " + canceled);
		}
		if (false) {
			System.out.println("Invoking rtrHoldRequest...");
			String rq = "";
			String rs = port.rtrHoldRequest(APIKEY, rq);
			System.out.println("rtrHoldRequest rs=" + rs);
		}
		if (false) {
			System.out.println("Invoking rtrBookingRequest...");
//			String rq = "";
//			String rs = port.rtrBookingRequest(APIKEY, rq);
//			System.out.println("rtrBookingRequest rs=" + rs);
			// Create request XML string
			XMLOutputter outputter = new XMLOutputter();
			org.jdom.Element root = new org.jdom.Element("RTRBookingRequest");
			root.setAttribute("Version", String.valueOf(3));
			org.jdom.Element bookingRequest = new org.jdom.Element("BookingRequest");
			root.addContent(bookingRequest);
			bookingRequest.setAttribute("PropertyReferenceID", String.valueOf(1462));
			bookingRequest.setAttribute("RequestType", "Book");
			bookingRequest.setAttribute("CheckInDate", "2012-10-01");
			bookingRequest.setAttribute("CheckOutDate", "2012-10-15");
			bookingRequest.setAttribute("GuestCount", String.valueOf(3));
			bookingRequest.setAttribute("ExternalBookingID", "1234567");
			bookingRequest.setAttribute("CouponCode", "");
			
			org.jdom.Element tenant = new org.jdom.Element("Tenant");
			bookingRequest.addContent(tenant);
			tenant.setAttribute("ID", "1");
			tenant.setAttribute("TenantID", "1");
			tenant.setAttribute("FirstName", "1");
			tenant.setAttribute("LastName", "1");
			tenant.setAttribute("Street", "1");
			tenant.setAttribute("City", "1");
			tenant.setAttribute("Zip", "1");
			tenant.setAttribute("Country", "1");
			tenant.setAttribute("Email", "1");
			tenant.setAttribute("ExternalTenantID", "1");
			
			org.jdom.Element paymentInfo = new org.jdom.Element("PaymentInfo");
			bookingRequest.addContent(paymentInfo);
			paymentInfo.setAttribute("CardHolderName", "1");
			paymentInfo.setAttribute("CardType", "1");
			paymentInfo.setAttribute("ExpMonth", "1");
			paymentInfo.setAttribute("ExpYear", "1");
			paymentInfo.setAttribute("AmountCharged", "1");

			
			ByteArrayOutputStream os = new ByteArrayOutputStream();
			outputter.output(root, os);
			String rq = os.toString();
			System.out.println(rq);
			//outputter.output(root, System.out);       
			String rs = port.rtrBookingRequest(APIKEY, rq);
			System.out.println("rtrBookingRequest rs=" + rs);

			// Parse response XML string
			SAXBuilder builder = new SAXBuilder();
			org.jdom.Document document = builder.build(new StringReader(rs));
			root = document.getRootElement();
//			String status = root.getAttributeValue("Status");
//			Boolean available = "Available".equalsIgnoreCase(status);
//			System.out.println("rtrBookingRequest available=" + status + " " + available);
		}
		if (false) {
			System.out.println("Invoking rtrCancelHold...");
			String rq = "";
			String rs = port.rtrCancelHold(APIKEY, rq);
			System.out.println("rtrCancelHold rs=" + rs);
		}
//		if (false) {
//			System.out.println("Invoking rtrCustomDistributionCatalog...");
//
//			Client client = ClientProxy.getClient(port);
//			// qualify the incoming 'RTRProperties' element with 'http://realtimerental.com/webservice' 
//			Map<String, String> inTransformMap =  Collections.singletonMap("RTRProperties", "{http://realtimerental.com/webservice}RTRProperties");
//			org.apache.cxf.interceptor.transform.TransformInInterceptor transformInInterceptor =
//					new org.apache.cxf.interceptor.transform.TransformInInterceptor();
//			transformInInterceptor.setInTransformElements(inTransformMap);
//			client.getInInterceptors().add(transformInInterceptor);
//
//			int options = 63;
//			String rs = port.rtrCustomDistributionCatalog(APIKEY, options);
//			//			System.out.println("rtrCustomDistributionCatalog rs=" + rs);
//
//			XStream xstream = new XStream(new StaxDriver());
//			//			XStream xstream = new XStream();
//			//			xstream.setMode(XStream.XPATH_ABSOLUTE_REFERENCES);
//			xstream.processAnnotations(RTRProperties.class);
//			xstream.processAnnotations(RTRProperties.Property.class);
//			xstream.processAnnotations(RTRProperties.Property.AvailabilityInfo.class);
//			xstream.processAnnotations(RTRProperties.Property.RateInfo.class);
//			xstream.processAnnotations(PropertyManager.class);
//			xstream.processAnnotations(PropertyDetails.class);
//			xstream.processAnnotations(PropertyDetails.Activities.class);
//			xstream.processAnnotations(PropertyDetails.Activities.Activity.class);
//			xstream.processAnnotations(PropertyDetails.Amenities.class);
//			xstream.processAnnotations(PropertyDetails.Amenities.Amenity.class);
//			xstream.processAnnotations(PropertyDetails.CondoCode.class);
//			xstream.processAnnotations(PropertyDetails.Deposits.class);
//			xstream.processAnnotations(PropertyDetails.Deposits.Deposit.class);
//			xstream.processAnnotations(PropertyDetails.Geography.class);
//			xstream.processAnnotations(PropertyDetails.LocationCode.class);
//			xstream.processAnnotations(PropertyDetails.LocationOther.class);
//			xstream.processAnnotations(PropertyDetails.Photos.class);
//			xstream.processAnnotations(PropertyDetails.Photos.Image.class);
//			xstream.processAnnotations(PropertyDetails.PropertyRating.class);
//			xstream.processAnnotations(PropertyDetails.PropertyURL.class);
//			xstream.processAnnotations(PropertyDetails.StreetCode.class);
//			xstream.processAnnotations(PropertyDetails.Views.class);
//			xstream.processAnnotations(PropertyDetails.Views.View.class);
//			//			xstream.addImplicitCollection (PropertyDetails.Amenities.class, "Amenity");
//			RTRProperties properties = (RTRProperties) xstream.fromXML(rs);
//			//			RTRProperties properties = (RTRProperties) xstream.fromXML(new File("C:\\rtrCustomDistributionCatalog.xml"));
//			System.out.println("properties=" + properties);
//
//			//			PrintWriter out = new PrintWriter(new FileWriter("C:\\rtrCustomDistributionCatalog.xml"));
//			//			out.print(rs);
//			//			out.close();
//
//			//http://cxf.apache.org/docs/jax-rs-advanced-xml.html
//			//http://www.integratingstuff.com/2010/09/06/solving-unmarshalling-problems-with-jaxbcxf/
//			//@XmlAttribute(name = "description")
//			//			Unmarshaller unmarshaller = JAXBContext.newInstance(RTRProperties.class).createUnmarshaller();
//			//			InputStream inputStream = new ByteArrayInputStream(rs.getBytes());
//			//			RTRProperties result = (RTRProperties) unmarshaller.unmarshal(inputStream);
//			//			System.out.println("result=" + result);
//		}
		if (false) {
			//Show PropDetails = 1;
			//Show BrokerInfo = 2;
			//Show PhotoURLs = 4;
			//Show Availability = 8;
			//Show Amenities = 16;
			//Show Rates = 32;
			//Show all = 63;
			System.out.println("Invoking rtrCustomDistributionCatalog...");
			int options = 63;
			String rs = port.rtrCustomDistributionCatalog(APIKEY, options);
			//			System.out.println("rtrCustomDistributionCatalog rs=" + rs);

			//			PrintWriter out = new PrintWriter(new FileWriter("C:\\rtrCustomDistributionCatalog.xml"));
			//			out.print(rs);
			//			out.close();

			//http://cxf.apache.org/docs/jax-rs-advanced-xml.html
			//http://www.integratingstuff.com/2010/09/06/solving-unmarshalling-problems-with-jaxbcxf/
			//@XmlAttribute(name = "description")
			Unmarshaller unmarshaller = JAXBContext.newInstance(RTRProperties.class, PropertyManager.class, PropertyDetails.class, PaymentInfo.class, Lease.class).createUnmarshaller();
			//			Unmarshaller unmarshaller = JAXBContext.newInstance(RTRProperties.class).createUnmarshaller();
			//			InputStream inputStream = new ByteArrayInputStream(rs.getBytes());
			//			RTRProperties result = (RTRProperties) unmarshaller.unmarshal(inputStream);
			RTRProperties result = (RTRProperties) unmarshaller.unmarshal(new File("C:\\rtrCustomDistributionCatalog.xml"));
			System.out.println("result=" + result);

			List<RTRProperties.Property> properties = result.getProperty();
			for (RTRProperties.Property property : properties) {
				System.out.println("property=" + property.getPropertyManagerName());				
			}

			//			Unmarshaller unmarshaller = JAXBContext.newInstance("net.cbtltd.rest.rtr").createUnmarshaller();
			//			JAXBElement<RTRProperties> root = unmarshaller.unmarshal(new StreamSource(rs), RTRProperties.class);
			//			System.out.println("result=" + root.getValue());
		}
		if (false) {
			//Show PropDetails = 1;
			//Show BrokerInfo = 2;
			//Show PhotoURLs = 4;
			//Show Availability = 8;
			//Show Amenities = 16;
			//Show Rates = 32;
			//Show all = 63;
			System.out.println("Invoking rtrCustomDistributionCatalog...");
			int options = 63;
			String rs = port.rtrCustomDistributionCatalog(APIKEY, options);
			System.out.println("rtrCustomDistributionCatalog rs=" + rs);
			PrintWriter out = new PrintWriter(new FileWriter("C:\\rtrCustomDistributionCatalog.xml"));
			out.print(rs);
			out.close();
		}
		if (false) {
			//Show PropDetails = 1;
			//Show BrokerInfo = 2;Show PhotoURLs = 4;
			//Show Availability = 8;Show Amenities = 16;
			//Show Rates = 32;
			//Show all = 63;
			System.out.println("Invoking rtrLoadPropertyCatalog...");
			String rq = "";
			String rs = port.rtrLoadPropertyCatalog(APIKEY, rq);
			System.out.println("rtrLoadPropertyCatalog rs=" + rs);
		}
		if (false) {
			//Show PropDetails = 1;
			//Show BrokerInfo = 2;Show PhotoURLs = 4;
			//Show Availability = 8;Show Amenities = 16;
			//Show Rates = 32;
			//Show all = 63;
			System.out.println("Invoking rtrCustomPropertyCatalog...");
			int options = 63;
			String rs = port.rtrCustomPropertyCatalog(APIKEY, options);
			System.out.println("rtrCustomPropertyCatalog rs=" + rs);
		}
		if (false) {
			System.out.println("Invoking rtrCustomDistributionCatalog...");
			int options = 63;
//			String rs = port.rtrCustomDistributionCatalog(APIKEY, options);
//			System.out.println("rtrCustomDistributionCatalog rs=" + rs);
			  
//			for (int i = 0; i < list.size(); i++) {
//				org.jdom.Element node = (org.jdom.Element) list.get(i);
//				node.ge
//			   System.out.println("First Name : " + node.getChildText("firstname"));
//			   System.out.println("Last Name : " + node.getChildText("lastname"));
//			   System.out.println("Nick Name : " + node.getChildText("nickname"));
//			   System.out.println("Salary : " + node.getChildText("salary"));
//	 
//			}
	 
		}
		
		if (false) {
			System.out.println("Invoking rtrCustomDistributionCatalog...");
			int options = 63;
//			String rs = port.rtrCustomDistributionCatalog(APIKEY, options);
			//			System.out.println("rtrCustomDistributionCatalog rs=" + rs);

			DocumentBuilderFactory dbf = 
					DocumentBuilderFactory.newInstance();
			DocumentBuilder db = dbf.newDocumentBuilder();
			InputSource is = new InputSource();
//			is.setCharacterStream(new StringReader(rs));
			File file = new File("C:\\rtrCustomDistributionCatalog.xml");
			InputStream inputStream= new FileInputStream(file);
			Reader reader = new InputStreamReader(inputStream,"UTF-8");
			is.setCharacterStream(reader);

			Document doc = db.parse(is);
			NodeList properties = doc.getElementsByTagName("Property");
			System.out.println("Property length=" + properties.getLength());

			// iterate the properties
			for (int property_index = 0; property_index < properties.getLength(); property_index++) {
				Product product = new Product();
				ArrayList<String> attributes = new ArrayList<String>();
				StringBuilder description = new StringBuilder();
				
				Element property = (Element) properties.item(property_index);
				product.setAltid(property.getAttribute("PropertyID"));
				Party party = getParty(sqlSession, property.getAttribute("PropertyManagerID"));
				product.setSupplierid(party.getId());
				

//				NodeList propertymanagers = property.getElementsByTagName("PropertyManager");
//				Element propertymanager = (Element) propertymanagers.item(0);
//				party.setAltpartyid(HasUrls.PARTY_RTR_ID);
//				party.setCreatorid(Party.CBT_LTD_PARTY);
//				party.setCurrency(Currency.Code.USD.name());
//				party.setEmployerid(party.getId());
//				party.setRank(0);
//				party.setState(Party.CREATED);
//				party.setType(Party.Type.Organization.name());
//				party.setUnit(Unit.EA);
//				party.setAltid(propertymanager.getAttribute("ID"));
//				party.setName(propertymanager.getAttribute("Name"));
//				
//				StringBuilder address = new StringBuilder();
//				address.append(propertymanager.getAttribute("Office"));
//				address.append("\n").append(propertymanager.getAttribute("Street"));
//				address.append("\n").append(propertymanager.getAttribute("City"));
//				address.append("\n").append(propertymanager.getAttribute("State-Province"));
//				address.append("\n").append(propertymanager.getAttribute("Country"));
//				party.setPostaladdress(address.toString());
//				
//				party.setPostalcode(propertymanager.getAttribute("Zip"));
//				party.setDayphone(propertymanager.getAttribute("Phone1"));
//				party.setNightphone(propertymanager.getAttribute("Phone2"));
//				party.setFaxphone(propertymanager.getAttribute("Fax"));
//				party.setEmailaddress(propertymanager.getAttribute("Email"));
//				party.setWebaddress(propertymanager.getAttribute("WebSite"));
//				System.out.println("PropertyManager: " + party);
				
				NodeList propertydetails = property.getElementsByTagName("PropertyDetails");
				System.out.println("PropertyDetails: " + propertydetails.getLength());
				Node test = propertydetails.item(0);
//				NamedNodeMap map = test.getAttributes();
				NodeList list = test.getChildNodes();
				
				Node propertyname = list.item(0);
				System.out.println("test: " + test.getNodeName() + ", " + propertyname.getNodeName());
				Node desc = list.item(1);

				System.out.println("desc: " + desc.getNodeName() + ", " + desc.getTextContent());
				
				Element propertydetail = (Element) propertydetails.item(0);
				
				product.setName(propertydetail.getAttribute("PropertyName"));
				System.out.println("PropertyName: " + product.getName());
				String x = property.getElementsByTagName("Description").item(0).getNodeValue();
				description.append(propertydetail.getAttribute("Description"));
				System.out.println("Description: " + property.getElementsByTagName("Description").item(0).getNodeValue());

//				address = new StringBuilder();
//				address.append(propertydetail.getAttribute("Street"));
//				address.append("\n").append(propertydetail.getAttribute("City"));
//				address.append("\n").append(propertydetail.getAttribute("State"));
//				address.append(propertydetail.getAttribute("Zip"));
//				address.append("\n").append(propertydetail.getAttribute("Country"));
//				product.setPhysicaladdress(address.toString());
//				System.out.println("Address: " + product.getPhysicaladdress());

//				String person = propertydetail.getAttribute("TotalSleeps");
//				product.setPerson(person == null || person.isEmpty() ? 2 : Integer.valueOf(propertydetail.getAttribute("OccupancyLimit")));
//				String room = propertydetail.getAttribute("BedRooms");
//				product.setRoom(room == null || room.isEmpty() ? 2 : Integer.valueOf(propertydetail.getAttribute("BedRooms")));
//				String bath = propertydetail.getAttribute("Baths");
//				product.setBathroom(bath == null || bath.isEmpty() ? 2 : Integer.valueOf(propertydetail.getAttribute("Baths")));
//
//				product.setLocationid(getLocationid(property.getAttribute("LocationCode")));
//				System.out.println("LocationCode: " + property.getAttribute("LocationCode"));
				
//				addType(attributes, property.getAttribute("PropertyType"));
//				addType(attributes, property.getAttribute("Smoking"));
//				addType(attributes, property.getAttribute("Floor"));
//				addType(attributes, property.getAttribute("HalfBaths"));
//				addType(attributes, property.getAttribute("ThreeQuarterBaths"));
//				addType(attributes, property.getAttribute("Unit"));

//				Element amenities = (Element) propertydetail.getElementsByTagName("Amenities").item(0);
//				NodeList amenity = amenities.getElementsByTagName("Amenity");
//				for (int index = 0; index < amenity.getLength(); index++) {
//					Element item = (Element) amenity.item(index);
//					if (item != null) {addAmenity(attributes, item.getAttribute("ID"));}
//				}
//				
//				Element views = (Element) propertydetail.getElementsByTagName("Views").item(0);
//				NodeList view = views.getElementsByTagName("View");
//				for (int index = 0; index < view.getLength(); index++) {
//					Element item = (Element) view.item(index);
//					if (item != null) {description.append("\n").append(item.getAttribute("Description"));}
//				}

//				Element rates = (Element) propertydetail.getElementsByTagName("RateInfo").item(0);
//				System.out.println("RateInfo " + rates);
//				NodeList rate = rates.getElementsByTagName("Rate");
//				if (rate != null && rate.getLength() > 0) {
//					Price price = new Price();
//					price.setEntityid(product.getId());
//					price.setEntitytype(NameId.Type.Product.name());
//					price.setPartyid(party.getId());
//					price.setState(Price.CREATED);
//					sqlSession.getMapper(PriceMapper.class).deletebyexample(price);
//					for (int index = 0; index < rate.getLength(); index++) {
//						Element item = (Element) rate.item(index);
//						if (item != null) {
//							String dailyRate = item.getAttribute("DailyRate");
//							Double value = dailyRate == null ? 0.0 : Double.valueOf(dailyRate);
//							price.setCost(value * DISCOUNT / 100);
//							price.setCurrency(Currency.Code.USD.name());
//							String checkInDate = item.getAttribute("CheckInDate");
//							Date date = DF.parse(checkInDate);
//							price.setDate(date);
//							String checkOutDate = item.getAttribute("CheckOutDate");
//							Date todate = DF.parse(checkOutDate);
//							price.setTodate(todate);
//							String minimumStay = item.getAttribute("MinimumStay");
//							Integer stay = minimumStay == null ? 1 : Integer.valueOf(minimumStay);
//							Double minimum = value * stay;
//							price.setMinimum(minimum);
//							price.setQuantity(0.0);
//							price.setRule(item.getAttribute("Rules"));
//							price.setType(NameId.Type.Reservation.name());
//							price.setUnit(Unit.DAY);
//	//TODO:						item.getAttribute("Description");
//	//						item.getAttribute("Rate");
//	//						item.getAttribute("CheckInDay"); //1 = Sunday2 = Monday4 = Tuesday8 = Wednesday16 = Thursday32 = Friday64 = Saturday127 = Any Day
//							sqlSession.getMapper(PriceMapper.class).create(price);
//						}
//					}
//				}

//				addType(attributes, property.getAttribute("LocationCode"));
				
//				product.setPublicText(new Text(product.getPublicId(), "Property Description", Text.Type.HTML, new Date(), description.toString(), Language.EN));
//				TextService.update(sqlSession, product.getTexts());
//
//				RelationService.create(sqlSession, Relation.PRODUCT_ATTRIBUTE, product.getId(), attributes);
//
//				NodeList name = property.getElementsByTagName("name");
//				Element line = (Element) name.item(0);
//
//				NodeList title = property.getElementsByTagName("title");
//				line = (Element) title.item(0);
//				System.out.println("product: " + product);
//				
//				
//				addActivities(attributes,property.getPROP_ACTIVITIES());
//				LOG.error("attributes " + attributes);
//				RelationService.create(sqlSession, Relation.PRODUCT_ATTRIBUTE, product.getId(), attributes);
			}
		}

		System.out.println("Finished...");
		System.exit(0);
	}
}
