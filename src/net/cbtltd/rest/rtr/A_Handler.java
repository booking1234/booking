package net.cbtltd.rest.rtr;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.namespace.QName;

import net.cbtltd.rest.payment.ReservationPrice;
import net.cbtltd.rest.response.QuoteDetail;
import net.cbtltd.server.EmailService;
import net.cbtltd.server.MonitorService;
import net.cbtltd.server.PartnerHandler;
import net.cbtltd.server.PartnerService;
import net.cbtltd.server.RazorServer;
import net.cbtltd.server.RelationService;
import net.cbtltd.server.ServiceException;
import net.cbtltd.server.TextService;
import net.cbtltd.server.UploadFileService;
import net.cbtltd.server.api.CountryMapper;
import net.cbtltd.server.api.FinanceMapper;
import net.cbtltd.server.api.LocationMapper;
import net.cbtltd.server.api.PartyMapper;
import net.cbtltd.server.api.PriceMapper;
import net.cbtltd.server.api.ProductMapper;
import net.cbtltd.server.api.ReservationMapper;
import net.cbtltd.shared.Country;
import net.cbtltd.shared.Downloaded;
import net.cbtltd.shared.Error;
import net.cbtltd.shared.Finance;
import net.cbtltd.shared.Language;
import net.cbtltd.shared.Location;
import net.cbtltd.shared.NameId;
import net.cbtltd.shared.Partner;
import net.cbtltd.shared.Party;
import net.cbtltd.shared.Price;
import net.cbtltd.shared.Product;
import net.cbtltd.shared.Relation;
import net.cbtltd.shared.Reservation;
import net.cbtltd.shared.Text;
import net.cbtltd.shared.Time;
import net.cbtltd.shared.Unit;
import net.cbtltd.shared.api.IsPartner;
import net.cbtltd.shared.finance.gateway.CreditCard;

import org.apache.ibatis.session.SqlSession;
import org.apache.log4j.Logger;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;

/**
 * This class was generated by Apache CXF 2.4.0
 * 2012-07-01T12:13:31.560+02:00
 * Generated source version: 2.4.0
 * 
 * @see Giorgi Stoynev gstoynev@realtimerental.com 
 * @see https://mail.google.com/mail/u/0/?ui=2&shva=1#inbox/1382a5d76e056793
 * @see http://cxf.apache.org/docs/transformationfeature.html
 * @see http://xstream.codehaus.org/index.html
 * 
 * FIX FOR javax.xml.bind.UnmarshalException: unexpected element (uri:""...)
 * PUT NAMESPACE IN @XmlRootElement(name = "...", namespace="")
 * 
 * Your authentication key, which will be sent separately, has been authorized for:
 * http://172.16.96.52/webservice/RTRWSAPI.asmx?op=HelloWorld (no restriction, but will trigger throttling if overused)
 * http://172.16.96.52/webservice/RTRWSAPI.asmx?op=RTRCustomDistributionCatalog   (restricted to two calls every 24 hours)
 * http://172.16.96.52/webservice/RTRWSAPI.asmx?op=RTRPropertyAvailability (no restriction, but will trigger throttling if overused)
 * http://172.16.96.52/webservice/RTRWSAPI.asmx?op=RTRPropertyInformation (no restriction, but will trigger throttling if overused)
 * Please note that actual inventory has not been attached to your authentication key yet. I expect that to happen within 24 hours.
 */
public class A_Handler extends PartnerHandler implements IsPartner {

	private static final Logger LOG = Logger.getLogger(A_Handler.class.getName());
	private static final QName SERVICE_NAME = new QName("http://realtimerental.com/webservice", "RTRWSAPI");
//	private static final String getApikey() = "D5CAC6CC-E290-4463-9BBD-B621D99A2C4B";

	/**
	 * Instantiates a new partner handler.
	 *
	 * @param sqlSession the current SQL session.
	 * @param partner the partner.
	 */
	public A_Handler (Partner partner) {super(partner);}

	/**
	 * Gets the port to which to connect.
	 *
	 * @return the port
	 */
	public static final RTRWSAPISoap getPort() {
		URL wsdlURL = RTRWSAPI.WSDL_LOCATION;
		RTRWSAPI ss = new RTRWSAPI(wsdlURL, SERVICE_NAME);
		return ss.getRTRWSAPISoap();
	}

	/**
	 * Returns collisions with the reservation.
	 *
	 * @param sqlSession the current SQL session.
	 * @param reservation the reservation for collisions
	 * @return list of collisions
	 */
	public boolean isAvailable(SqlSession sqlSession, Reservation reservation) {
		Date timestamp = new Date();
		String message = "isAvailable " + reservation.getId();
		LOG.debug(message);
		boolean isAvailable = false;
		try {
//			Product product = sqlSession.getMapper(ProductMapper.class).read(reservation.getProductid());
//			if (product == null) {throw new ServiceException(Error.product_id, reservation.getProductid());}
			// Create request XML string
			XMLOutputter outputter = new XMLOutputter();
			Element root = new Element("RTRBookingRequest");
			root.setAttribute("Version", String.valueOf(3));
			Element bookingRequest = new Element("BookingRequest");
			root.addContent(bookingRequest);
			bookingRequest.setAttribute("PropertyID", PartnerService.getProductaltid(sqlSession, reservation));
			bookingRequest.setAttribute("RequestType", "AvailabilityInformation");
			bookingRequest.setAttribute("CheckInDate", format(reservation.getFromdate()));
			bookingRequest.setAttribute("CheckOutDate", format(reservation.getTodate()));
			bookingRequest.setAttribute("GuestCount", String.valueOf(reservation.getAdult() + reservation.getChild()));
			bookingRequest.setAttribute("CouponCode", "");
			ByteArrayOutputStream os = new ByteArrayOutputStream();
			outputter.output(root, os);
			String rq = os.toString();
			LOG.debug("rtrPropertyAvailability rq=" + rq);

			// Submit request
			RTRWSAPISoap port = getPort();
			String rs = port.rtrPropertyAvailability(getApikey(), rq);
			LOG.debug("rtrPropertyAvailability rs=" + rs);

			// Parse response XML string
			SAXBuilder builder = new SAXBuilder();
			Document document = builder.build(new StringReader(rs));
			root = document.getRootElement();
			String status = root.getAttributeValue("Status");
			isAvailable = "Available".equalsIgnoreCase(status);
			LOG.debug("rtrPropertyAvailability available=" + status + " " + isAvailable);
		}
		catch (Throwable x) {x.getMessage();} 
		MonitorService.monitor(message, timestamp);
		return isAvailable;
	}
	
	/**
	 * Create reservation in foreign system.
	 *
	 * @param sqlSession the current SQL session.
	 * @param reservation the reservation to be created.
	 * @param product the product to be reserved.
	 */
	public void createReservation(SqlSession sqlSession, Reservation reservation) {
		Date timestamp = new Date();
		String message = "createReservation " + reservation.getId();
		LOG.debug(message);
		try {
			//Prepare data
			if (reservation.notActive()) {throw new ServiceException(Error.reservation_state, reservation.getId() + " " + reservation.getState());}
			if (reservation.noProductid()) {throw new ServiceException(Error.product_id, reservation.getId());}
			if (reservation.noCustomerid()) {throw new ServiceException(Error.party_id, reservation.getId());}
			Party customer = sqlSession.getMapper(PartyMapper.class).read(reservation.getCustomerid());

			EmailService.provisionalReservation(sqlSession, reservation);
			/* USES EMAIL INSTEAD
			if (reservation.noFinanceid()) {throw new ServiceException(Error.finance_id, reservation.getId());}
			Finance finance = sqlSession.getMapper(FinanceMapper.class).read(reservation.getFinanceid());
			if (finance == null || finance.noAccountnumber(true)) {throw new ServiceException(Error.card_number, reservation.getId());}
			// Create request XML string
			XMLOutputter outputter = new XMLOutputter();
			Element root = new Element("RTRBookingRequest");
			root.setAttribute("Version", String.valueOf(3));
			Element bookingRequest = new Element("BookingRequest");
			root.addContent(bookingRequest);
			bookingRequest.setAttribute("PropertyReferenceID", productaltid);
			bookingRequest.setAttribute("RequestType", reservation.hadState(Reservation.State.Provisional.name()) ? "Hold" : "Book");
			bookingRequest.setAttribute("CheckInDate", format(reservation.getFromdate()));
			bookingRequest.setAttribute("CheckOutDate", format(reservation.getTodate()));
			bookingRequest.setAttribute("GuestCount", String.valueOf(reservation.getAdult() + reservation.getChild()));
			bookingRequest.setAttribute("ExternalBookingID", reservation.getName());
			//			bookingRequest.setAttribute("CouponCode", "");

			// Guest information
			Element tenant = new Element("Tenant");
			bookingRequest.addContent(tenant);
			tenant.setAttribute("ID", "1");
			//			tenant.setAttribute("TenantID", "1");
			tenant.setAttribute("FirstName", customer.getFirstName());
			tenant.setAttribute("LastName", customer.getFamilyName());
			tenant.setAttribute("Street", customer.getAddress(0));
			tenant.setAttribute("Zip", customer.getPostalcode());
			tenant.setAttribute("Country", customer.getCountry());
			tenant.setAttribute("Email", customer.getEmailaddress());
			tenant.setAttribute("ExternalTenantID", customer.getId());

			// Payment information
			Element paymentInfo = new Element("PaymentInfo");
			bookingRequest.addContent(paymentInfo);
			paymentInfo.setAttribute("CardHolderName", finance.getName());
			paymentInfo.setAttribute("CardType", finance.getCardType().name());
			paymentInfo.setAttribute("ExpMonth", finance.getMonth());
			paymentInfo.setAttribute("ExpYear", finance.getYear());
			Double deposit = reservation.getDeposit(reservation.getQuote());
			paymentInfo.setAttribute("AmountCharged", (deposit == null || deposit.isNaN()) ? "0.0" : String.valueOf(deposit));

			// Submit request
			ByteArrayOutputStream os = new ByteArrayOutputStream();
			outputter.output(root, os);
			String rq = os.toString();
			LOG.debug("rtrBookingRequest rq=" + rq);
			String rs = getPort().rtrBookingRequest(getApikey(), rq);
			LOG.debug("rtrBookingRequest rs=" + rs);

			// Parse response XML string
			SAXBuilder builder = new SAXBuilder();
			Document document = builder.build(new StringReader(rs));
			root = document.getRootElement();
			String status = root.getAttributeValue("Status");
			Boolean booked = "Booked".equalsIgnoreCase(status);
			LOG.debug("rtrBookingRequest booked=" + status + " " + booked);
			if (booked) {
				reservation.setAltpartyid(getAltpartyid());
				reservation.setAltid(root.getAttributeValue("LeaseID"));
				reservation.setState(Reservation.State.Confirmed.name());
			}
			else {reservation.setState(Reservation.State.Cancelled.name());}
			sqlSession.getMapper(ReservationMapper.class).update(reservation);
			LOG.debug("rtrBookingRequest reservation=" + reservation);
			*/
		}
		catch (Throwable x) {
			reservation.setMessage(x.getMessage());
			reservation.setState(Reservation.State.Cancelled.name());
			sqlSession.getMapper(ReservationMapper.class).update(reservation);
			LOG.error(reservation.getMessage());
		} 
		LOG.debug(message + " " + reservation);
		MonitorService.monitor(message, timestamp);
	}

	/**
	 * Read reservation.
	 *
	 * @param sqlSession the current SQL session.
	 * @param reservation the reservation to be read.
	 */
	public void readReservation(SqlSession sqlSession, Reservation reservation) {
		Date timestamp = new Date();
		String message = "readReservation altid " + reservation.getAltid();
		LOG.debug(message);
		try {
			//			Boolean useInternalID = true;
			//			Booking booking = port.getBooking(getApikey(), reservation.getAltid(), useInternalID);
			//			LOG.debug("readReservation booking " + booking);
			//			if (booking == null) {throw new ServiceException(Error.reservation_id, reservation.getAltid() + " invalid ID.");}
			//			reservation = getReservation(sqlSession, booking);
			LOG.debug("readReservation " + reservation);
			throw new ServiceException(Error.service_absent, "RTR readReservation()");
		}
		catch (Throwable x) {x.getMessage();} 
		MonitorService.monitor(message, timestamp);
	}

	/**
	 * Update reservation.
	 *
	 * @param sqlSession the current SQL session.
	 * @param reservation the reservation to be updated.
	 */
	public void updateReservation(SqlSession sqlSession, Reservation reservation) {
		Date timestamp = new Date();
		String message = "updateReservation " + reservation.getId();
		LOG.debug(message);
		try {
			//			Booking rq = getBooking(sqlSession, reservation);
			//			Integer options = null;
			//			port.modifyBooking(getApikey(), rq, options);
			throw new ServiceException(Error.service_absent, "RTR updateReservation()");
		}
		catch (Throwable x) {x.getMessage();} 
		MonitorService.monitor(message, timestamp);
	}

	/**
	 * Confirm reservation.
	 *
	 * @param sqlSession the current SQL session.
	 * @param reservation the reservation to be confirmed.
	 */
	public void confirmReservation(SqlSession sqlSession, Reservation reservation) {
		//DO NOTHING
	}

	/**
	 * Cancel reservation.
	 *
	 * @param sqlSession the current SQL session.
	 * @param reservation the reservation to be cancelled.
	 */
	public void cancelReservation(SqlSession sqlSession, Reservation reservation) {
		Date timestamp = new Date();
		String message = "cancelReservation " + reservation.getAltid();
		LOG.debug(message);
		try {
			reservation = sqlSession.getMapper(ReservationMapper.class).read(reservation.getId());
			if (reservation == null) {throw new ServiceException(Error.reservation_id, "RTR cancelReservation");}
			if (reservation.noProductid()) {throw new ServiceException(Error.product_id, reservation.getId());}

			Product product = sqlSession.getMapper(ProductMapper.class).read(reservation.getProductid());

			XMLOutputter outputter = new XMLOutputter();
			Element root = new Element("RTRBookingRequest");
			root.setAttribute("Version", String.valueOf(3));
			Element bookingRequest = new Element("BookingRequest");
			root.addContent(bookingRequest);
			bookingRequest.setAttribute("PropertyReferenceID", product.getAltid());
			bookingRequest.setAttribute("RequestType", "Cancel");
			bookingRequest.setAttribute("LeaseID", reservation.getAltid());
			ByteArrayOutputStream os = new ByteArrayOutputStream();
			outputter.output(root, os);
			String rq = os.toString();
			LOG.debug("cancelReservation rq=" + rq);
			String rs = getPort().rtrCancelBooking(getApikey(), rq);
			LOG.debug("rtrCancelBooking rs=" + rs);

			// Parse response XML string
			SAXBuilder builder = new SAXBuilder();
			Document document = builder.build(new StringReader(rs));
			root = document.getRootElement();
			String status = root.getAttributeValue("Status");
			Boolean canceled = "Canceled".equalsIgnoreCase(status);
			LOG.debug("rtrCancelBooking canceled=" + status + " " + canceled);
		}
		catch (Throwable x) {x.getMessage();} 
		MonitorService.monitor(message, timestamp);
	}

	/**
	 * Transfer accommodation alerts.
	 *
	 * @param sqlSession the current SQL session.
	 */
	public synchronized void readAlerts() {
		throw new ServiceException(Error.service_absent, "RTR readAlerts()");
	}

	/**
	 * Read accommodation prices.
	 *
	 * @param sqlSession the current SQL session.
	 */
	public synchronized void readPrices() {
		Date timestamp = new Date();
		String message = "readPrices ";
		LOG.debug(message);
		final SqlSession sqlSession = RazorServer.openSession();
		try {
			RelationService.load(sqlSession, Downloaded.PRODUCT_DOWNLOAD_DATE, getAltpartyid(), new Date().toString());
			int options = 63;
			String rs = getPort().rtrCustomDistributionCatalog(getApikey(), options);
			
			FileOutputStream out = new FileOutputStream("c:\\rtrPrices.xml");
		    out.write(rs.getBytes());
		    out.close();
		
			SAXBuilder builder = new SAXBuilder();
//			Document document = (Document) builder.build(rs);
			File xmlFile = new File("C:\\rtrPrices.xml");
			Document document = (Document) builder.build(xmlFile);

			Element rootNode = document.getRootElement();
			List<Element> properties = rootNode.getChildren("Property");
			int i = 0;
			for (Element property : properties) {
				String propertyid = property.getAttributeValue("PropertyID");
				Product product = sqlSession.getMapper(ProductMapper.class).altread(new NameId(getAltpartyid(), propertyid));
				if (product == null) {LOG.error(Error.product_id.getMessage() + " " + propertyid);}
				else {
					List<Element> rates = property.getChild("RateInfo").getChildren("Rate");
					for (Element rate : rates) {readPrice(sqlSession, product.getId(), getAltpartyid(), rate);}
					sqlSession.commit();
					LOG.debug(i++ + " " + propertyid + " " + product.getId());
					wait(getPricewait());
					//TODO: TEST break;
				}
			}
		}
		catch (Throwable x) {
			sqlSession.rollback();
			x.getMessage();
		} 
		finally {sqlSession.close();}
		MonitorService.monitor(message, timestamp);
	}

	/**
	 * Transfer property locations.
	 *
	 * @param sqlSession the current SQL session.
	 */
	public synchronized void readLocations() {
		throw new ServiceException(Error.service_absent, "RTR readLocations()");
	}

	/**
	 * Transfer accommodation products.
	 *
	 * Show PropDetails = 1;
	 * Show BrokerInfo = 2;
	 * Show PhotoURLs = 4;
	 * Show Availability = 8;
	 * Show Amenities = 16;
	 * Show Rates = 32;
	 * Show all = 63;
	 * 
	 * @param sqlSession the current SQL session.
	 */
	public synchronized void readProducts() {
		Date timestamp = new Date();
		String message = "RTR readProducts ";
		LOG.debug(message);
		final SqlSession sqlSession = RazorServer.openSession();
		try {
			RelationService.load(sqlSession, Downloaded.PRODUCT_DOWNLOAD_DATE, getAltpartyid(), new Date().toString());
			int options = 63;
			String rs = getPort().rtrCustomDistributionCatalog(getApikey(), options);
			
			FileOutputStream out = new FileOutputStream("c:\\rtrCustomDistributionCatalog.xml");
		    out.write(rs.getBytes());
		    out.close();
		
			SAXBuilder builder = new SAXBuilder();
//			Document document = (Document) builder.build(rs);

			File xmlFile = new File("C:\\rtrCustomDistributionCatalog.xml");
			Document document = (Document) builder.build(xmlFile);

			Element rootNode = document.getRootElement();
			List<Element> properties = rootNode.getChildren("Property");
			int i = 0;
			for (Element property : properties) {
				String propertyID = property.getAttributeValue("PropertyID");
				Product product = PartnerService.getProduct(sqlSession, getAltpartyid(), propertyID);
				if (product == null) {continue;}
				StringBuilder description = new StringBuilder();
				ArrayList<String> attributes = new ArrayList<String>();

//				Element propertyManager = property.getChild("PropertyManager");
//				Party supplier = getPropertyManager(sqlSession, propertyManager);
//				product.setSupplierid(supplier.getId());
//				RelationService.replace(sqlSession, Relation.ORGANIZATION_PRODUCT, product.getSupplierid(), product.getId());
				product.setSupplierid(getAltpartyid());
				
				product.setOwnerid(getAltpartyid());
				product.setUnit(Unit.DAY);

				List<Element> propertydetails = property.getChildren("PropertyDetails");
				for (Element propertydetail : propertydetails) {

					description.append(propertydetail.getChildText("Description"));

					StringBuilder address = new StringBuilder();
					address.append(propertydetail.getChildText("Street"));
					address.append("\n").append(propertydetail.getChildText("City"));
					address.append("\n").append(propertydetail.getChildText("State"));
					address.append(propertydetail.getChildText("Zip"));
					address.append("\n").append(propertydetail.getChildText("Country"));
					product.setPhysicaladdress(address.toString());
					//LOG.debug("Address: " + product.getPhysicaladdress());

					String person = propertydetail.getChildText("TotalSleeps");
					product.setPerson(person == null || person.isEmpty() ? 2 : Integer.valueOf(propertydetail.getChildText("OccupancyLimit")));
					String room = propertydetail.getChildText("BedRooms");
					product.setRoom(room == null || room.isEmpty() ? 2 : Integer.valueOf(propertydetail.getChildText("BedRooms")));
					String bath = propertydetail.getChildText("Baths");
					product.setBathroom(bath == null || bath.isEmpty() ? 2 : Integer.valueOf(propertydetail.getChildText("Baths")));
					product.setToilet(product.getBathroom());

					product.setChild(0);
					product.setInfant(0);
					product.setCommission(getCommission());
					product.setDiscount(getDiscount());
					product.setRank(getRank());
					String propertyRating = propertydetail.getChildText("PropertyRating");
					product.setRating(propertyRating == null || propertyRating.isEmpty() ? 5 : Integer.valueOf(propertyRating));
					product.setWebaddress(propertydetail.getChildText("PropertyURL"));

					product.setAltitude(0.0);
					product.setLocationid(getLocationid(propertydetail.getChild("LocationCode").getAttributeValue("ID")));

					Location location = sqlSession.getMapper(LocationMapper.class).read(product.getLocationid());
					product.setLatitude(location.getLatitude());
					product.setLongitude(location.getLongitude());

					Country country = sqlSession.getMapper(CountryMapper.class).read(location.getCountry());
					product.setCurrency(country.getCurrency());
					product.setQuantity(1);

//					Element condoCode = propertydetail.getChild("CondoCode");
//					Element propertyType = propertydetail.getChild("PropertyType");

					product.setName(PartnerService.getProductname(propertydetail.getChild("PropertyName").getText(), location.getName(), product.getId()));

					sqlSession.getMapper(ProductMapper.class).update(product);

					product.setValue(Product.Value.PropertyType.name(), propertydetail.getChildText(Product.Value.PropertyType.name()));
					product.setValue(Product.Value.Smoking.name(), propertydetail.getChildText(Product.Value.Smoking.name()));
					product.setValue(Product.Value.Floor.name(), propertydetail.getChildText(Product.Value.Floor.name()));
					product.setValue(Product.Value.HalfBaths.name(), propertydetail.getChildText(Product.Value.HalfBaths.name()));
					product.setValue(Product.Value.ThreeQuarterBaths.name(), propertydetail.getChildText(Product.Value.ThreeQuarterBaths.name()));
					product.setValue(Product.Value.Unit.name(), propertydetail.getChildText(Product.Value.Unit.name()));

//					Element activityElement = propertydetail.getChild("Activities");
					List<Element> activities = propertydetail.getChild("Activities").getChildren("Activity");
					for (Element activity : activities) {
						if (activity != null) {addActivity(attributes, activity.getAttributeValue("ID"));}
					}

					List<Element> amenities = propertydetail.getChild("Amenities").getChildren("Amenity");
					for (Element amenity : amenities) {
						if (amenity != null) {addAmenity(attributes, amenity.getAttributeValue("ID"));}
					}

					List<Element> views = propertydetail.getChild("Views").getChildren("View");
					for (Element view : views) {
						if (view != null) {description.append("\n").append(view.getAttributeValue("Description"));}
					}

					product.setPublicText(new Text(product.getPublicId(), product.getPublicLabel(), Text.Type.HTML, new Date(), description.toString(), Language.EN));
					TextService.update(sqlSession, product.getTexts());
					RelationService.replace(sqlSession, Relation.PRODUCT_VALUE, product.getId(), product.getValues());
					RelationService.create(sqlSession, Relation.PRODUCT_ATTRIBUTE, product.getId(), attributes);

					ArrayList<NameId> pictures = new ArrayList<NameId>();
					List<Element> images = propertydetail.getChild("Photos").getChildren("Image");
					for (Element image : images) {
						String caption = image.getAttributeValue("Caption");
						String url = image.getText();
						pictures.add(new NameId(caption, url));
					}
					UploadFileService.uploadImages(sqlSession, NameId.Type.Product, product.getId(), Language.EN, pictures);
				}
				
				List<Element> rates = property.getChild("RateInfo").getChildren("Rate");
				for (Element rate : rates) {
					readPrice(sqlSession, product.getId(), getAltpartyid(), rate);
				}

				sqlSession.commit();
				LOG.debug(i++ + " " + propertyID + " " + product.getId());
				wait(getProductwait());
				//TODO: TEST break;
			}
		}
		catch (Throwable x) {
			sqlSession.rollback();
			x.getMessage();
		} 
		finally {sqlSession.close();}
		MonitorService.monitor(message, timestamp);
	}

	/**
	 * Transfer reservation schedule.
	 *
	 * @param sqlSession the current SQL session.
	 */
	public synchronized void readSchedule() {
		Date timestamp = new Date();
		String message = "RTR readSchedule ";
		LOG.debug(message);
		final SqlSession sqlSession = RazorServer.openSession();
		try {
			RelationService.load(sqlSession, Downloaded.PRODUCT_DOWNLOAD_DATE, getAltpartyid(), new Date().toString());
			int options = 63;
			String rs = getPort().rtrCustomDistributionCatalog(getApikey(), options);
			
			FileOutputStream out = new FileOutputStream("c:\\rtrCustomDistributionCatalog.xml");
		    out.write(rs.getBytes());
		    out.close();
		
			SAXBuilder builder = new SAXBuilder();
//			Document document = (Document) builder.build(rs);

			File xmlFile = new File("C:\\rtrCustomDistributionCatalog.xml");
			Document document = (Document) builder.build(xmlFile);

			Element rootNode = document.getRootElement();
			List<Element> properties = rootNode.getChildren("Property");
			for (Element property : properties) {
				String altid = property.getAttributeValue("PropertyID");
				Product product = PartnerService.getProduct(sqlSession, getAltpartyid(), altid);
				if (product == null) {continue;}
				Date fromdate = timestamp;
				Date todate = null;
				List<Element> availabilityInfo = property.getChildren("AvailabilityInfo");
				for (Element availability : availabilityInfo) {
					List<Element> availabilities = availability.getChildren("Availability");
					for (Element item : availabilities) {
						String checkInDate = item.getAttributeValue("CheckInDate");
						todate = parse(checkInDate);
						if (!todate.after(fromdate)) {continue;}
						PartnerService.createSchedule(sqlSession, product, fromdate, todate, timestamp);
						String checkOutDate = item.getAttributeValue("CheckOutDate");
						fromdate = parse(checkOutDate);
						todate = null;
					}
				}
				PartnerService.cancelSchedule(sqlSession, product, timestamp);
				sqlSession.commit();
				wait(getSchedulewait());
			}
		}
		catch (Throwable x) {
			sqlSession.rollback();
			LOG.error(x.getMessage());
		}
		MonitorService.monitor(message, timestamp);
	}

	/**
	 * Transfer accommodation special offers.
	 *
	 * @param sqlSession the current SQL session.
	 */
	public synchronized void readSpecials() {
		throw new ServiceException(Error.service_absent, "RTR readSpecials()");
	}

	/**
	 * Sets the Razor price from the RTR rate element.
	 *
	 * @param sqlSession the current SQL session.
	 * @param altid the Rate element
	 * @return the Razor price
	 */
	private void readPrice(SqlSession sqlSession, String productid, String partyid, Element rate) throws Throwable {
		if (rate == null) {return;}
		
		Price price = new Price();
		price.setPartyid(getAltpartyid());
		price.setEntitytype(NameId.Type.Product.name());
		price.setEntityid(productid);
		price.setCurrency(getCurrency());
		price.setQuantity(0.0);
		price.setUnit(Unit.DAY);
		String rules = rate.getAttributeValue("Rules");
		price.setName(rules == null ? Price.RACK_RATE : rules);
		price.setType(NameId.Type.Reservation.name());
		
		String checkInDate = rate.getAttributeValue("CheckInDate");
		Date date = parse(checkInDate);
		price.setDate(date);
		
		String checkOutDate = rate.getAttributeValue("CheckOutDate");
		Date todate = parse(checkOutDate);
		price.setTodate(Time.addDuration(todate, -1.0, Time.DAY));

		net.cbtltd.shared.Price exists = sqlSession.getMapper(PriceMapper.class).exists(price);
		if (exists == null) {sqlSession.getMapper(PriceMapper.class).create(price);}
		else {price = exists;}

		price.setState(net.cbtltd.shared.Price.CREATED);
		price.setFactor(1.0);
		String dailyRate = rate.getAttributeValue("DailyRate");
		Double value = dailyRate == null ? 0.0 : Double.valueOf(dailyRate);
		price.setValue(value);
		price.setCost(value * getDiscount() / 100);
		String minimumStay = rate.getAttributeValue("MinimumStay");
		Integer stay = minimumStay == null ? 1 : Integer.valueOf(minimumStay);
		Double minimum = value * stay;
		price.setMinimum(minimum);
		String checkInDay = rate.getAttributeValue("CheckInDay");
		price.setRule(getRule(checkInDay));
		sqlSession.getMapper(PriceMapper.class).update(price);
		sqlSession.getMapper(PriceMapper.class).cancelversion(price);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public Map<String, String> createReservationAndPayment(SqlSession sqlSession,
			Reservation reservation, CreditCard creditCard) {
		throw new ServiceException(Error.service_absent, "RTR createReservationAndPayment()");		
	}

	/**
	 * Gets the Razor party from the RTR property manager element.
	 *
	 * @param sqlSession the current SQL session.
	 * @param altid the PropertyManager element
	 * @return the Razor party
	 */
	private Party getPropertyManager(SqlSession sqlSession, Element element) {
		String altid = element.getAttributeValue("ID");
		Party party = PartnerService.getParty(sqlSession, getAltpartyid(), altid, Party.Type.Organization);
		party.setEmployerid(party.getId());
		party.setRank(0);
		party.setState(Party.CREATED);
		party.setType(Party.Type.Organization.name());
		party.setAltid(altid);
		party.setName(element.getAttributeValue("Name"));

		StringBuilder address = new StringBuilder();
		address.append(element.getAttributeValue("Office"));
		address.append("\n").append(element.getAttributeValue("Street"));
		address.append("\n").append(element.getAttributeValue("City"));
		address.append("\n").append(element.getAttributeValue("State-Province"));
		address.append("\n").append(element.getAttributeValue("Country"));
		party.setPostaladdress(address.toString());

		party.setPostalcode(element.getAttributeValue("Zip"));
		party.setDayphone(element.getAttributeValue("Phone1"));
		party.setNightphone(element.getAttributeValue("Phone2"));
		party.setFaxphone(element.getAttributeValue("Fax"));
		party.setEmailaddress(element.getAttributeValue("Email"));
		party.setWebaddress(element.getAttributeValue("WebSite"));
		party.setCountry(Country.US);
		party.setCurrency(getCurrency());
		party.setLanguage(Language.EN);
		party.setNotes("Downloaded from RTR");
		party.setRank(0);
		party.setUnit(Unit.EA);
		sqlSession.getMapper(PartyMapper.class).update(party);
		LOG.debug("party " + party);
		return party;
	}

	private static HashMap<String,String> ACTIVITIES = null;

	private static final void addActivity(ArrayList<String> attributes, String activity) {
		if (ACTIVITIES == null) {
			ACTIVITIES = new HashMap<String, String>();
			ACTIVITIES.put("1","RST152");
			ACTIVITIES.put("2","RST4");
			ACTIVITIES.put("3","RST6");
			ACTIVITIES.put("4","RST6");
			ACTIVITIES.put("5","RST7");
			ACTIVITIES.put("6","RST7");
			ACTIVITIES.put("7","RST7");
			ACTIVITIES.put("8","ACC12");
			ACTIVITIES.put("9","ACC50");
			ACTIVITIES.put("10","RST88");
			ACTIVITIES.put("11","RST20");
			ACTIVITIES.put("12","RST142");
			ACTIVITIES.put("13","RST18");
			ACTIVITIES.put("14","RST132");
			ACTIVITIES.put("15","RST20");
			ACTIVITIES.put("16","RST35");
			ACTIVITIES.put("17","RST27");
			ACTIVITIES.put("18","RST91");
			ACTIVITIES.put("19","RST60");
			ACTIVITIES.put("20","RST61");
			ACTIVITIES.put("21","RST9");
			ACTIVITIES.put("22","RST153");
			ACTIVITIES.put("23","RST105");
			ACTIVITIES.put("24","RST63");
			ACTIVITIES.put("25","RST65");
			ACTIVITIES.put("26","RST146");
			ACTIVITIES.put("27","RST67");
			ACTIVITIES.put("28","RST68");
			ACTIVITIES.put("29","RST139");
			ACTIVITIES.put("30","RST109");
			ACTIVITIES.put("31","RST151");
			ACTIVITIES.put("32","RST73");
			ACTIVITIES.put("33","ACC37");
			ACTIVITIES.put("34","RST77");
			ACTIVITIES.put("35","RST79");
			ACTIVITIES.put("36","ACC41");
			ACTIVITIES.put("37","RST112");
			ACTIVITIES.put("38","RST80");
			ACTIVITIES.put("39","RST5");
			ACTIVITIES.put("40","RST83");
			ACTIVITIES.put("41","RST156");
			ACTIVITIES.put("42","RST142");
			ACTIVITIES.put("43","RST96");
			ACTIVITIES.put("44","RST86");
			ACTIVITIES.put("45","RST87");
			ACTIVITIES.put("46","RST120");
			ACTIVITIES.put("47","RST157");
			ACTIVITIES.put("48","LOC26");
			ACTIVITIES.put("49","RST116");
			ACTIVITIES.put("50","RST106");
			ACTIVITIES.put("51","RST71");
			ACTIVITIES.put("52","ACC2");
			ACTIVITIES.put("53","RST60");
			ACTIVITIES.put("54","ACC55");
			ACTIVITIES.put("55","RST99");
			ACTIVITIES.put("56","PCT36");
			ACTIVITIES.put("57","RST101");
			ACTIVITIES.put("58","ACC56");
			ACTIVITIES.put("59","ACC57");
		}
		if (activity == null) {}
		else if (ACTIVITIES.get(activity) == null) {LOG.error("addActivity " + activity);}
		else {attributes.add(ACTIVITIES.get(activity));}
	}

	private static HashMap<String,String> AMENITIES = null;

	private static final void addAmenity(ArrayList<String> attributes, String amenity) {
		if (AMENITIES == null) {
			AMENITIES = new HashMap<String, String>();
			AMENITIES.put("1010","HAC253");
			AMENITIES.put("1011","HAC71");
			AMENITIES.put("1012","FAC5");
			AMENITIES.put("1013","FAC5");
			AMENITIES.put("1020","RMA142");
			AMENITIES.put("110","BED3");
			AMENITIES.put("1110","ACC6");
			AMENITIES.put("1111","");
			AMENITIES.put("1120","RST149");
			AMENITIES.put("1130","TRP2");
			AMENITIES.put("1140","RSP65");
			AMENITIES.put("1150","RSP7");
			AMENITIES.put("120","BED5");
			AMENITIES.put("1210","RMA7");
			AMENITIES.put("1211","RMA7");
			AMENITIES.put("1220","RMA146");
			AMENITIES.put("130","BED1");
			AMENITIES.put("1310","SUI3");
			AMENITIES.put("1320","HAC33");
			AMENITIES.put("1330","PHY38");
			AMENITIES.put("140","BED9");
			AMENITIES.put("1420","GRP3");
			AMENITIES.put("1421","HIC3");
			AMENITIES.put("1430","GRP4");
			AMENITIES.put("1440","");
			AMENITIES.put("1441","RMA106");
			AMENITIES.put("1442","RMA41");
			AMENITIES.put("1443","RMA7");
			AMENITIES.put("1444","");
			AMENITIES.put("1445","RMA7");
			AMENITIES.put("1446","FAC3");
			AMENITIES.put("1447","FAC3");
			AMENITIES.put("1448","FAC3");
			AMENITIES.put("1449","HAC5");
			AMENITIES.put("145","BED6");
			AMENITIES.put("1450","");
			AMENITIES.put("1451","REC33");
			AMENITIES.put("1452","REC33");
			AMENITIES.put("1453","RMA104");
			AMENITIES.put("1454","RSP94");
			AMENITIES.put("1455","RMA163");
			AMENITIES.put("1456","EQP15");
			AMENITIES.put("1459","PET11");
			AMENITIES.put("1460","PET7");
			AMENITIES.put("1461","HAC33");
			AMENITIES.put("1462","BUS14");
			AMENITIES.put("1463","PCT32");
			AMENITIES.put("1464","EQP40");
			AMENITIES.put("1465","EQP37");
			AMENITIES.put("1466","BUS9 ");
			AMENITIES.put("1467","RMA41");
			AMENITIES.put("1468","");
			AMENITIES.put("1469","CBF89");
			AMENITIES.put("1470","HAC79");
			AMENITIES.put("1471","HAC79");
			AMENITIES.put("1472","HAC165");
			AMENITIES.put("1473","HAC165");
			AMENITIES.put("1474","EQP65");
			AMENITIES.put("1475","RST117");
			AMENITIES.put("1476","HAC35");
			AMENITIES.put("1477","HAC35");
			AMENITIES.put("1488","SEC91");
			AMENITIES.put("1489","RMP210");
			AMENITIES.put("1490","");
			AMENITIES.put("1491","FAC4");
			AMENITIES.put("1492","FAC4");
			AMENITIES.put("1493","FAC4");
			AMENITIES.put("1494","CBF74");
			AMENITIES.put("150","BED6");
			AMENITIES.put("1500","ACC55");
			AMENITIES.put("1590","RMA235");
			AMENITIES.put("1591","EQP61");
			AMENITIES.put("1592","");
			AMENITIES.put("1593","RSP4");
			AMENITIES.put("1594","HAC44");
			AMENITIES.put("160","BED6");
			AMENITIES.put("1600","CTT12");
			AMENITIES.put("1601","ACC48");
			AMENITIES.put("1602","FAC2");
			AMENITIES.put("1603","CBF18");
			AMENITIES.put("1604","HAC104");
			AMENITIES.put("1605","");
			AMENITIES.put("1606","EQP63");
			AMENITIES.put("1607","");
			AMENITIES.put("1608","BUS98");
			AMENITIES.put("1609","CPT16");
			AMENITIES.put("1610","RMA240");
			AMENITIES.put("1611","");
			AMENITIES.put("1612","");
			AMENITIES.put("1613","USC10");
			AMENITIES.put("1614","USC13");
			AMENITIES.put("1615","PHY38");
			AMENITIES.put("1616","PHY48");
			AMENITIES.put("1617","RMA105");
			AMENITIES.put("1618","RMA88");
			AMENITIES.put("1619","RMA88");
			AMENITIES.put("1620","RMA77");
			AMENITIES.put("1621","RMA208");
			AMENITIES.put("1622","RMA208");
			AMENITIES.put("1623","HAC77");
			AMENITIES.put("1624","SCY3");
			AMENITIES.put("1625","RMA59");
			AMENITIES.put("1626","USC12");
			AMENITIES.put("1627","USC11");
			AMENITIES.put("1628","USC3");
			AMENITIES.put("1640","");
			AMENITIES.put("1650","");
			AMENITIES.put("1660","EQP64");
			AMENITIES.put("1670","RSP5");
			AMENITIES.put("1680","EQP62");
			AMENITIES.put("1690","RMP214");
			AMENITIES.put("170","BED10");
			AMENITIES.put("1700","PHY47");
			AMENITIES.put("1710","RMP217");
			AMENITIES.put("1720","RSP132");
			AMENITIES.put("1730","RMP54");
			AMENITIES.put("1740","RMA123");
			AMENITIES.put("180","");
			AMENITIES.put("1800","");
			AMENITIES.put("190","CBF17");
			AMENITIES.put("200","RMA26");
			AMENITIES.put("201","RMA26");
			AMENITIES.put("210","BED2");
			AMENITIES.put("220","BED11");
			AMENITIES.put("230","BED10");
			AMENITIES.put("310","RMA32");
			AMENITIES.put("320","RMA68");
			AMENITIES.put("330","");
			AMENITIES.put("340","CBF85");
			AMENITIES.put("350","RMA167");
			AMENITIES.put("360","RMA167");
			AMENITIES.put("370","EQP63");
			AMENITIES.put("410","HAC5");
			AMENITIES.put("420","HAC5");
			AMENITIES.put("430","PMA157");
			AMENITIES.put("431","PMA157");
			AMENITIES.put("440","HAC242");
			AMENITIES.put("450","HAC242");
			AMENITIES.put("460","");
			AMENITIES.put("470","RMA157");
			AMENITIES.put("510","USC1");
			AMENITIES.put("520","USC6");
			AMENITIES.put("530","USC6");
			AMENITIES.put("540","");
			AMENITIES.put("610","HAC109");
			AMENITIES.put("620","HAC109");
			AMENITIES.put("710","RMA149");
			AMENITIES.put("720","RMA149");
			AMENITIES.put("730","");
			AMENITIES.put("731","");
			AMENITIES.put("740","RMA55");
			AMENITIES.put("750","RMA56");
			AMENITIES.put("760","");
			AMENITIES.put("810","HAC53");
			AMENITIES.put("811","");
			AMENITIES.put("812","RCC7");
			AMENITIES.put("813","");
			AMENITIES.put("910","RMP90");
			AMENITIES.put("911","");
			AMENITIES.put("920","RMP210");
			AMENITIES.put("930","EQP17");
		}
		if (amenity == null) {}
		else if (AMENITIES.get(amenity) == null) {LOG.error("addAmenity " + amenity);}
		else {attributes.add(AMENITIES.get(amenity));}
	}

	private static HashMap<String,String> LOCATIONS = null;

	private static final String getLocationid(String location) {
		if (LOCATIONS == null) {
			LOCATIONS = new HashMap<String, String>();
			LOCATIONS.put("2728","36133");
			LOCATIONS.put("3327","55420");
			LOCATIONS.put("3328","55420");
			LOCATIONS.put("3329","55420");
			LOCATIONS.put("3330","55420");
			LOCATIONS.put("3331","55420");
			LOCATIONS.put("3332","55420");
			LOCATIONS.put("3241","45372");
			LOCATIONS.put("3325","83487");
			LOCATIONS.put("3236","65903");
			LOCATIONS.put("3361","2358");
			LOCATIONS.put("3362","2358");
			LOCATIONS.put("3363","2358");
			LOCATIONS.put("3364","2358");
			LOCATIONS.put("3365","2358");
			LOCATIONS.put("3366","2358");
			LOCATIONS.put("2862","45573");
			LOCATIONS.put("2594","45573");
			LOCATIONS.put("2595","45573");
			LOCATIONS.put("2596","45573");
			LOCATIONS.put("2597","45573");
			LOCATIONS.put("2598","45573");
			LOCATIONS.put("2599","45573");
			LOCATIONS.put("2600","45573");
			LOCATIONS.put("2601","45573");
			LOCATIONS.put("2627","45573");
			LOCATIONS.put("2768","45573");
			LOCATIONS.put("2769","45573");
			LOCATIONS.put("2770","45573");
			LOCATIONS.put("2771","45573");
			LOCATIONS.put("2772","45573");
			LOCATIONS.put("2773","45573");
			LOCATIONS.put("1985","45633");
			LOCATIONS.put("2850","45634");
			LOCATIONS.put("2851","45634");
			LOCATIONS.put("2852","45634");
			LOCATIONS.put("2853","45634");
			LOCATIONS.put("2907","72087");
			LOCATIONS.put("2908","72087");
			LOCATIONS.put("2909","72087");
			LOCATIONS.put("2926","72087");
			LOCATIONS.put("2997","83488");
			LOCATIONS.put("2998","83488");
			LOCATIONS.put("2928","83488");
			LOCATIONS.put("2929","83488");
			LOCATIONS.put("2930","83488");
			LOCATIONS.put("2931","83488");
			LOCATIONS.put("3254","83488");
			LOCATIONS.put("1056","83488");
			LOCATIONS.put("1057","83488");
			LOCATIONS.put("1058","83488");
			LOCATIONS.put("1059","83488");
			LOCATIONS.put("1061","83488");
			LOCATIONS.put("1313","83489");
			LOCATIONS.put("1314","6143");
			LOCATIONS.put("1315","6145");
			LOCATIONS.put("1316","6156");
			LOCATIONS.put("1317","6162");
			LOCATIONS.put("1318","6161");
			LOCATIONS.put("1319","6172");
			LOCATIONS.put("1320","6161");
			LOCATIONS.put("3257","67668");
			LOCATIONS.put("2735","46101");
			LOCATIONS.put("2736","46101");
			LOCATIONS.put("2737","46101");
			LOCATIONS.put("2738","46101");
			LOCATIONS.put("2739","46101");
			LOCATIONS.put("2740","46101");
			LOCATIONS.put("3238","83490");
			LOCATIONS.put("3367","111");
			LOCATIONS.put("3368","111");
			LOCATIONS.put("3369","111");
			LOCATIONS.put("3370","111");
			LOCATIONS.put("3371","111");
			LOCATIONS.put("3372","111");
			LOCATIONS.put("3356","46386");
			LOCATIONS.put("2216","46435");
			LOCATIONS.put("2217","46435");
			LOCATIONS.put("2218","46435");
			LOCATIONS.put("2219","46435");
			LOCATIONS.put("2220","46435");
			LOCATIONS.put("2221","46435");
			LOCATIONS.put("2222","46435");
			LOCATIONS.put("2223","46435");
			LOCATIONS.put("2224","46435");
			LOCATIONS.put("2225","46435");
			LOCATIONS.put("2226","46435");
			LOCATIONS.put("2227","46435");
			LOCATIONS.put("2228","46435");
			LOCATIONS.put("2229","46435");
			LOCATIONS.put("1778","46435");
			LOCATIONS.put("2181","83491");
			LOCATIONS.put("2182","83491");
			LOCATIONS.put("2183","83491");
			LOCATIONS.put("2184","83491");
			LOCATIONS.put("2185","83491");
			LOCATIONS.put("2186","83491");
			LOCATIONS.put("2247","83491");
			LOCATIONS.put("3242","46465");
			LOCATIONS.put("3234","83492");
			LOCATIONS.put("2612","82371");
			LOCATIONS.put("1068","82371");
			LOCATIONS.put("1069","82371");
			LOCATIONS.put("1070","82371");
			LOCATIONS.put("1071","82371");
			LOCATIONS.put("1087","82371");
			LOCATIONS.put("1088","82371");
			LOCATIONS.put("1089","82371");
			LOCATIONS.put("1090","82371");
			LOCATIONS.put("1091","82371");
			LOCATIONS.put("1092","82371");
			LOCATIONS.put("1093","82371");
			LOCATIONS.put("2968","83493");
			LOCATIONS.put("2969","83493");
			LOCATIONS.put("2970","83493");
			LOCATIONS.put("2971","83493");
			LOCATIONS.put("2972","83493");
			LOCATIONS.put("2987","83493");
			LOCATIONS.put("2988","83493");
			LOCATIONS.put("2989","83493");
			LOCATIONS.put("2990","83493");
			LOCATIONS.put("2991","83493");
			LOCATIONS.put("3289","65507");
			LOCATIONS.put("3290","65507");
			LOCATIONS.put("3291","65507");
			LOCATIONS.put("3292","65507");
			LOCATIONS.put("3293","65507");
			LOCATIONS.put("3240","70416");
			LOCATIONS.put("1793","65475");
			LOCATIONS.put("1796","7068");
			LOCATIONS.put("1792","7565");
			LOCATIONS.put("1794","7707");
			LOCATIONS.put("1797","78862");
			LOCATIONS.put("2729","36177");
			LOCATIONS.put("3224","83494");
			LOCATIONS.put("3261","83494");
			LOCATIONS.put("3262","83494");
			LOCATIONS.put("3263","83494");
			LOCATIONS.put("3264","83494");
			LOCATIONS.put("3265","83494");
			LOCATIONS.put("2178","83494");
			LOCATIONS.put("2179","57989");
			LOCATIONS.put("2180","50083");
			LOCATIONS.put("2284","83494");
			LOCATIONS.put("2285","83494");
			LOCATIONS.put("2286","83494");
			LOCATIONS.put("2333","79068");
			LOCATIONS.put("2334","79068");
			LOCATIONS.put("1854","79068");
			LOCATIONS.put("1082","46897");
			LOCATIONS.put("1083","46897");
			LOCATIONS.put("1084","46897");
			LOCATIONS.put("1085","46897");
			LOCATIONS.put("2977","53042");
			LOCATIONS.put("2978","53042");
			LOCATIONS.put("2979","53042");
			LOCATIONS.put("2980","53042");
			LOCATIONS.put("2981","53042");
			LOCATIONS.put("2982","53042");
			LOCATIONS.put("2983","53042");
			LOCATIONS.put("3259","65512");
			LOCATIONS.put("1671","2421");
			LOCATIONS.put("1672","83495");
			LOCATIONS.put("1673","83496");
			LOCATIONS.put("1674","58243");
			LOCATIONS.put("1675","35319");
			LOCATIONS.put("1676","35320");
			LOCATIONS.put("1677","35317");
			LOCATIONS.put("1678","83498");
			LOCATIONS.put("1679","83497");
			LOCATIONS.put("1680","83498");
			LOCATIONS.put("1681","15509");
			LOCATIONS.put("1682","68724");
			LOCATIONS.put("1683","83499");
			LOCATIONS.put("1684","70470");
			LOCATIONS.put("1685","82577");
			LOCATIONS.put("1686","83500");
			LOCATIONS.put("1687","33300");
			LOCATIONS.put("1688","33302");
			LOCATIONS.put("1689","33303");
			LOCATIONS.put("1690","33305");
			LOCATIONS.put("1691","83501");
			LOCATIONS.put("1692","70542");
			LOCATIONS.put("1693","64702");
			LOCATIONS.put("1694","70541");
			LOCATIONS.put("1695","86");
			LOCATIONS.put("1696","128");
			LOCATIONS.put("1697","");
			LOCATIONS.put("1698","124");
			LOCATIONS.put("1699","83");
			LOCATIONS.put("1700","35070");
			LOCATIONS.put("1701","35069");
			LOCATIONS.put("1702","40077");
			LOCATIONS.put("1703","83502");
			LOCATIONS.put("1704","58159");
			LOCATIONS.put("1834","85");
			LOCATIONS.put("1709","4207");
			LOCATIONS.put("1710","44907");
			LOCATIONS.put("1711","44109");
			LOCATIONS.put("1712","44109");
			LOCATIONS.put("1713","58244");
			LOCATIONS.put("1714","58254");
			LOCATIONS.put("1715","58256");
			LOCATIONS.put("1716","58255");
			LOCATIONS.put("1717","58255");
			LOCATIONS.put("1718","83494");
			LOCATIONS.put("1719","58112");
			LOCATIONS.put("1720","83504");
			LOCATIONS.put("1721","115");
			LOCATIONS.put("1722","76268");
			LOCATIONS.put("1723","27657");
			LOCATIONS.put("1705","83505");
			LOCATIONS.put("1706","41180");
			LOCATIONS.put("1707","41217");
			LOCATIONS.put("1708","41167");
			LOCATIONS.put("3324","46926");
			LOCATIONS.put("2255","35319");
			LOCATIONS.put("3304","83506");
			LOCATIONS.put("3305","83506");
			LOCATIONS.put("3306","83506");
			LOCATIONS.put("3307","83506");
			LOCATIONS.put("3308","83506");
			LOCATIONS.put("3347","53783");
			LOCATIONS.put("3348","53783");
			LOCATIONS.put("3349","53783");
			LOCATIONS.put("3350","53783");
			LOCATIONS.put("3333","83507");
			LOCATIONS.put("3275","47013");
			LOCATIONS.put("3276","47013");
			LOCATIONS.put("3277","47013");
			LOCATIONS.put("1855","83508");
			LOCATIONS.put("1911","");
			LOCATIONS.put("1912","");
			LOCATIONS.put("1913","");
			LOCATIONS.put("1914","");
			LOCATIONS.put("3309","83509");
			LOCATIONS.put("3310","83509");
			LOCATIONS.put("3311","83509");
			LOCATIONS.put("3312","83509");
			LOCATIONS.put("3313","83509");
			LOCATIONS.put("1779","47675");
			LOCATIONS.put("2230","47675");
			LOCATIONS.put("2231","47675");
			LOCATIONS.put("2232","47675");
			LOCATIONS.put("2233","47675");
			LOCATIONS.put("2481","82247");
			LOCATIONS.put("2482","82247");
			LOCATIONS.put("2483","82247");
			LOCATIONS.put("2484","82247");
			LOCATIONS.put("2485","82247");
			LOCATIONS.put("2307","47675");
			LOCATIONS.put("2308","47675");
			LOCATIONS.put("2309","47675");
			LOCATIONS.put("2310","47675");
			LOCATIONS.put("2311","47675");
			LOCATIONS.put("2312","47675");
			LOCATIONS.put("3319","83510");
			LOCATIONS.put("3320","83510");
			LOCATIONS.put("3321","83510");
			LOCATIONS.put("3322","83510");
			LOCATIONS.put("3323","83510");
			LOCATIONS.put("3284","79589");
			LOCATIONS.put("3285","79589");
			LOCATIONS.put("3286","79589");
			LOCATIONS.put("3287","79589");
			LOCATIONS.put("3288","79589");
			LOCATIONS.put("1571","83511");
			LOCATIONS.put("1572","62878");
			LOCATIONS.put("1573","10377");
			LOCATIONS.put("1574","83512");
			LOCATIONS.put("1575","10395");
			LOCATIONS.put("1576","83513");
			LOCATIONS.put("1577","10419");
			LOCATIONS.put("1578","72152");
			LOCATIONS.put("1579","10422");
			LOCATIONS.put("1580","10432");
			LOCATIONS.put("1581","71251");
			LOCATIONS.put("3406","83514");
			LOCATIONS.put("3391","47845");
			LOCATIONS.put("3392","47845");
			LOCATIONS.put("3385","115");
			LOCATIONS.put("3386","115");
			LOCATIONS.put("3387","115");
			LOCATIONS.put("3388","115");
			LOCATIONS.put("3389","115");
			LOCATIONS.put("3390","115");
			LOCATIONS.put("3360","47994");
			LOCATIONS.put("1831","47994");
			LOCATIONS.put("3394","48013");
			LOCATIONS.put("1078","0");
			LOCATIONS.put("1079","0");
			LOCATIONS.put("1080","0");
			LOCATIONS.put("1081","0");
			LOCATIONS.put("3231","48134");
			LOCATIONS.put("1860","48134");
			LOCATIONS.put("2269","81449");
			LOCATIONS.put("2270","51018");
			LOCATIONS.put("2271","47675");
			LOCATIONS.put("2272","81449");
			LOCATIONS.put("3243","48418");
			LOCATIONS.put("3354","83515");
			LOCATIONS.put("2655","49024");
			LOCATIONS.put("2656","49024");
			LOCATIONS.put("2657","49024");
			LOCATIONS.put("2658","49024");
			LOCATIONS.put("1640","49148");
			LOCATIONS.put("1641","49148");
			LOCATIONS.put("1642","49148");
			LOCATIONS.put("1643","49148");
			LOCATIONS.put("1644","49148");
			LOCATIONS.put("1645","49926");
			LOCATIONS.put("1646","83516");
			LOCATIONS.put("1647","50397");
			LOCATIONS.put("1648","83516");
			LOCATIONS.put("1649","81611");
			LOCATIONS.put("1650","54087");
			LOCATIONS.put("1651","54324");
			LOCATIONS.put("1652","54416");
			LOCATIONS.put("1653","56384");
			LOCATIONS.put("3338","49148");
			LOCATIONS.put("3339","49161");
			LOCATIONS.put("3282","49161");
			LOCATIONS.put("1136","46891");
			LOCATIONS.put("1137","51476");
			LOCATIONS.put("1138","49162");
			LOCATIONS.put("1139","49162");
			LOCATIONS.put("1140","55390");
			LOCATIONS.put("1141","81570");
			LOCATIONS.put("1142","48765");
			LOCATIONS.put("1143","46311");
			LOCATIONS.put("1144","46283");
			LOCATIONS.put("1145","83518");
			LOCATIONS.put("1146","83519");
			LOCATIONS.put("1147","83520");
			LOCATIONS.put("1148","83521");
			LOCATIONS.put("1161","49161");
			LOCATIONS.put("1786","70404");
			LOCATIONS.put("1828","83523");
			LOCATIONS.put("1777","21795");
			LOCATIONS.put("3266","83524");
			LOCATIONS.put("3220","83525");
			LOCATIONS.put("1987","83522");
			LOCATIONS.put("2056","51665");
			LOCATIONS.put("3136","62632");
			LOCATIONS.put("3399","62632");
			LOCATIONS.put("3400","62632");
			LOCATIONS.put("2273","49311");
			LOCATIONS.put("2274","49311");
			LOCATIONS.put("2275","49311");
			LOCATIONS.put("2276","49311");
			LOCATIONS.put("1780","49311");
			LOCATIONS.put("1632","49423");
			LOCATIONS.put("1633","49423");
			LOCATIONS.put("1634","49423");
			LOCATIONS.put("1635","54216");
			LOCATIONS.put("1636","55593");
			LOCATIONS.put("1637","83526");
			LOCATIONS.put("2984","83527");
			LOCATIONS.put("2985","83528");
			LOCATIONS.put("2973","49423");
			LOCATIONS.put("2974","49423");
			LOCATIONS.put("2975","49423");
			LOCATIONS.put("2976","49423");
			LOCATIONS.put("2480","6161");
			LOCATIONS.put("2873","83529");
			LOCATIONS.put("2874","83529");
			LOCATIONS.put("2875","83529");
			LOCATIONS.put("2876","83529");
			LOCATIONS.put("1885","49682");
			LOCATIONS.put("1886","83312");
			LOCATIONS.put("1887","83311");
			LOCATIONS.put("1888","49682");
			LOCATIONS.put("1889","83313");
			LOCATIONS.put("1890","49682");
			LOCATIONS.put("1891","49682");
			LOCATIONS.put("1892","83314");
			LOCATIONS.put("1893","49682");
			LOCATIONS.put("1894","83315");
			LOCATIONS.put("1895","83316");
			LOCATIONS.put("1896","49689");
			LOCATIONS.put("1897","83317");
			LOCATIONS.put("1898","83318");
			LOCATIONS.put("1899","57969");
			LOCATIONS.put("1900","45177");
			LOCATIONS.put("1901","83319");
			LOCATIONS.put("1902","45311");
			LOCATIONS.put("1903","46013");
			LOCATIONS.put("1904","50796");
			LOCATIONS.put("1905","47620");
			LOCATIONS.put("1906","50514");
			LOCATIONS.put("1907","50991");
			LOCATIONS.put("1908","45958");
			LOCATIONS.put("1909","55043");
			LOCATIONS.put("1910","83320");
			LOCATIONS.put("1924","49682");
			LOCATIONS.put("1925","49682");
			LOCATIONS.put("1926","49682");
			LOCATIONS.put("1927","49682");
			LOCATIONS.put("1928","49682");
			LOCATIONS.put("1929","49682");
			LOCATIONS.put("1930","49682");
			LOCATIONS.put("1973","68040");
			LOCATIONS.put("1974","82078");
			LOCATIONS.put("1975","83321");
			LOCATIONS.put("1976","83322");
			LOCATIONS.put("1977","83323");
			LOCATIONS.put("1978","83324");
			LOCATIONS.put("1979","83325");
			LOCATIONS.put("1980","83326");
			LOCATIONS.put("1981","83327");
			LOCATIONS.put("1982","83328");
			LOCATIONS.put("1983","83329");
			LOCATIONS.put("1263","65508");
			LOCATIONS.put("1264","83530");
			LOCATIONS.put("1272","83531");
			LOCATIONS.put("1273","79194");
			LOCATIONS.put("1274","28202");
			LOCATIONS.put("1275","28111");
			LOCATIONS.put("1276","27920");
			LOCATIONS.put("1277","83532");
			LOCATIONS.put("1278","83533");
			LOCATIONS.put("1279","83535");
			LOCATIONS.put("1280","83534");
			LOCATIONS.put("1281","28191");
			LOCATIONS.put("1282","27995");
			LOCATIONS.put("1283","83536");
			LOCATIONS.put("1284","0");
			LOCATIONS.put("1285","28147");
			LOCATIONS.put("1286","83537");
			LOCATIONS.put("1287","83538");
			LOCATIONS.put("1288","27804");
			LOCATIONS.put("1289","83534");
			LOCATIONS.put("2097","49753");
			LOCATIONS.put("2487","49753");
			LOCATIONS.put("2382","49753");
			LOCATIONS.put("2383","49753");
			LOCATIONS.put("2384","49753");
			LOCATIONS.put("2385","49753");
			LOCATIONS.put("2386","49753");
			LOCATIONS.put("2387","49753");
			LOCATIONS.put("1149","83330");
			LOCATIONS.put("1150","83330");
			LOCATIONS.put("1151","83330");
			LOCATIONS.put("1152","83331");
			LOCATIONS.put("1153","83332");
			LOCATIONS.put("1154","83332");
			LOCATIONS.put("1155","83333");
			LOCATIONS.put("1156","83334");
			LOCATIONS.put("1157","83335");
			LOCATIONS.put("1158","83332");
			LOCATIONS.put("1159","71807");
			LOCATIONS.put("1160","83336");
			LOCATIONS.put("1371","83330");
			LOCATIONS.put("3396","49921");
			LOCATIONS.put("3244","82188");
			LOCATIONS.put("3397","83337");
			LOCATIONS.put("3398","83337");
			LOCATIONS.put("1362","83338");
			LOCATIONS.put("1363","50325");
			LOCATIONS.put("1364","50325");
			LOCATIONS.put("1365","83340");
			LOCATIONS.put("1366","50881");
			LOCATIONS.put("1367","50881");
			LOCATIONS.put("1368","50325");
			LOCATIONS.put("1369","83341");
			LOCATIONS.put("1370","50881");
			LOCATIONS.put("2421","50881");
			LOCATIONS.put("2422","50881");
			LOCATIONS.put("2423","50881");
			LOCATIONS.put("2424","50881");
			LOCATIONS.put("2425","50881");
			LOCATIONS.put("2426","50881");
			LOCATIONS.put("2427","50881");
			LOCATIONS.put("2428","50881");
			LOCATIONS.put("2429","50881");
			LOCATIONS.put("3403","50172");
			LOCATIONS.put("3345","50326");
			LOCATIONS.put("2043","50326");
			LOCATIONS.put("2044","50326");
			LOCATIONS.put("2045","50326");
			LOCATIONS.put("2047","50326");
			LOCATIONS.put("2048","50326");
			LOCATIONS.put("2049","50326");
			LOCATIONS.put("2050","50326");
			LOCATIONS.put("2051","50326");
			LOCATIONS.put("2052","50326");
			LOCATIONS.put("2053","50326");
			LOCATIONS.put("2054","50326");
			LOCATIONS.put("3344","83342");
			LOCATIONS.put("2305","81194");
			LOCATIONS.put("2306","81194");
			LOCATIONS.put("1814","81194");
			LOCATIONS.put("2543","50605");
			LOCATIONS.put("2544","50605");
			LOCATIONS.put("2545","50605");
			LOCATIONS.put("2546","50605");
			LOCATIONS.put("2566","50605");
			LOCATIONS.put("2567","50605");
			LOCATIONS.put("2568","50605");
			LOCATIONS.put("2569","50605");
			LOCATIONS.put("2570","50605");
			LOCATIONS.put("2571","50605");
			LOCATIONS.put("2572","50605");
			LOCATIONS.put("2573","50605");
			LOCATIONS.put("2574","50605");
			LOCATIONS.put("2575","50605");
			LOCATIONS.put("1753","50614");
			LOCATIONS.put("2265","81598");
			LOCATIONS.put("2266","81598");
			LOCATIONS.put("2267","81598");
			LOCATIONS.put("2268","81598");
			LOCATIONS.put("1785","83539");
			LOCATIONS.put("1787","83540");
			LOCATIONS.put("1802","83343");
			LOCATIONS.put("1803","58108");
			LOCATIONS.put("1805","83343");
			LOCATIONS.put("1806","83343");
			LOCATIONS.put("1807","83343");
			LOCATIONS.put("1808","32468");
			LOCATIONS.put("1809","83343");
			LOCATIONS.put("1810","83343");
			LOCATIONS.put("1811","83343");
			LOCATIONS.put("1812","83343");
			LOCATIONS.put("1813","83343");
			LOCATIONS.put("1179","80396");
			LOCATIONS.put("1180","32902");
			LOCATIONS.put("1181","30701");
			LOCATIONS.put("1182","32348");
			LOCATIONS.put("1183","31828");
			LOCATIONS.put("1184","31939");
			LOCATIONS.put("1185","31691");
			LOCATIONS.put("1186","31807");
			LOCATIONS.put("1187","32350");
			LOCATIONS.put("1862","66707");
			LOCATIONS.put("3260","83344");
			LOCATIONS.put("3208","70143");
			LOCATIONS.put("3209","70143");
			LOCATIONS.put("3342","70523");
			LOCATIONS.put("3281","70523");
			LOCATIONS.put("1840","83345");
			LOCATIONS.put("1841","77604");
			LOCATIONS.put("1842","83346");
			LOCATIONS.put("1843","70524");
			LOCATIONS.put("1844","83347");
			LOCATIONS.put("1845","70525");
			LOCATIONS.put("1351","70525");
			LOCATIONS.put("1352","49981");
			LOCATIONS.put("1353","83348");
			LOCATIONS.put("1354","83350");
			LOCATIONS.put("1355","83349");
			LOCATIONS.put("1356","51574");
			LOCATIONS.put("1357","51574");
			LOCATIONS.put("1358","83351");
			LOCATIONS.put("1359","83352");
			LOCATIONS.put("1360","83353");
			LOCATIONS.put("1361","70526");
			LOCATIONS.put("3278","50921");
			LOCATIONS.put("3279","50921");
			LOCATIONS.put("3280","50921");
			LOCATIONS.put("3334","51011");
			LOCATIONS.put("1252","51011");
			LOCATIONS.put("1253","51011");
			LOCATIONS.put("1254","51011");
			LOCATIONS.put("1255","51011");
			LOCATIONS.put("1256","51011");
			LOCATIONS.put("1257","51011");
			LOCATIONS.put("1258","51011");
			LOCATIONS.put("1259","51011");
			LOCATIONS.put("1260","51011");
			LOCATIONS.put("1261","51011");
			LOCATIONS.put("1827","51011");
			LOCATIONS.put("2256","51011");
			LOCATIONS.put("2257","51011");
			LOCATIONS.put("2258","51011");
			LOCATIONS.put("2259","51011");
			LOCATIONS.put("2260","51011");
			LOCATIONS.put("2261","51011");
			LOCATIONS.put("2262","51011");
			LOCATIONS.put("2263","51011");
			LOCATIONS.put("2252","51011");
			LOCATIONS.put("2152","51011");
			LOCATIONS.put("2195","51018");
			LOCATIONS.put("2196","51018");
			LOCATIONS.put("2197","51018");
			LOCATIONS.put("2198","51018");
			LOCATIONS.put("2199","51018");
			LOCATIONS.put("2200","51018");
			LOCATIONS.put("2201","51018");
			LOCATIONS.put("2202","51018");
			LOCATIONS.put("2203","51018");
			LOCATIONS.put("2204","51018");
			LOCATIONS.put("2205","51018");
			LOCATIONS.put("2206","81493");
			LOCATIONS.put("2207","81493");
			LOCATIONS.put("2208","81493");
			LOCATIONS.put("2209","81493");
			LOCATIONS.put("2210","81493");
			LOCATIONS.put("2211","81493");
			LOCATIONS.put("2212","81449");
			LOCATIONS.put("2213","81449");
			LOCATIONS.put("2214","81449");
			LOCATIONS.put("2215","81493");
			LOCATIONS.put("1781","81493");
			LOCATIONS.put("3358","51022");
			LOCATIONS.put("1754","63211");
			LOCATIONS.put("1755","83354");
			LOCATIONS.put("1756","63211");
			LOCATIONS.put("1757","63211");
			LOCATIONS.put("1758","63211");
			LOCATIONS.put("1759","63211");
			LOCATIONS.put("1760","63211");
			LOCATIONS.put("1761","63211");
			LOCATIONS.put("1762","63211");
			LOCATIONS.put("2189","63211");
			LOCATIONS.put("2190","63211");
			LOCATIONS.put("2191","63211");
			LOCATIONS.put("2192","63211");
			LOCATIONS.put("2193","63211");
			LOCATIONS.put("2055","51104");
			LOCATIONS.put("2092","51104");
			LOCATIONS.put("2093","51104");
			LOCATIONS.put("2094","51104");
			LOCATIONS.put("2017","51104");
			LOCATIONS.put("2018","51104");
			LOCATIONS.put("2019","51104");
			LOCATIONS.put("2020","51104");
			LOCATIONS.put("2021","51104");
			LOCATIONS.put("2022","51104");
			LOCATIONS.put("2023","51104");
			LOCATIONS.put("2024","51104");
			LOCATIONS.put("2025","51104");
			LOCATIONS.put("2026","51104");
			LOCATIONS.put("2027","51104");
			LOCATIONS.put("2028","51104");
			LOCATIONS.put("2029","51104");
			LOCATIONS.put("2030","51104");
			LOCATIONS.put("2031","51104");
			LOCATIONS.put("2032","51104");
			LOCATIONS.put("2033","51104");
			LOCATIONS.put("2034","51104");
			LOCATIONS.put("2035","51104");
			LOCATIONS.put("2036","51104");
			LOCATIONS.put("2037","51104");
			LOCATIONS.put("2038","51104");
			LOCATIONS.put("2039","51104");
			LOCATIONS.put("2040","51104");
			LOCATIONS.put("2041","51104");
			LOCATIONS.put("2042","51104");
			LOCATIONS.put("2523","50881");
			LOCATIONS.put("2524","50881");
			LOCATIONS.put("2525","50881");
			LOCATIONS.put("2526","50881");
			LOCATIONS.put("2527","50881");
			LOCATIONS.put("2528","50881");
			LOCATIONS.put("2529","50881");
			LOCATIONS.put("2530","50881");
			LOCATIONS.put("2531","50881");
			LOCATIONS.put("2532","50881");
			LOCATIONS.put("2602","50881");
			LOCATIONS.put("2825","81216");
			LOCATIONS.put("2826","81216");
			LOCATIONS.put("2827","81216");
			LOCATIONS.put("2828","81216");
			LOCATIONS.put("2829","81216");
			LOCATIONS.put("2830","81216");
			LOCATIONS.put("2831","81216");
			LOCATIONS.put("2782","81216");
			LOCATIONS.put("3233","51224");
			LOCATIONS.put("2585","83355");
			LOCATIONS.put("2586","83355");
			LOCATIONS.put("2610","51252");
			LOCATIONS.put("2611","51252");
			LOCATIONS.put("2520","51252");
			LOCATIONS.put("2521","51252");
			LOCATIONS.put("2522","51252");
			LOCATIONS.put("2408","55926");
			LOCATIONS.put("2409","55926");
			LOCATIONS.put("2410","55926");
			LOCATIONS.put("2411","83357");
			LOCATIONS.put("2412","55926");
			LOCATIONS.put("2413","83356");
			LOCATIONS.put("2414","55926");
			LOCATIONS.put("2415","55926");
			LOCATIONS.put("2416","83357");
			LOCATIONS.put("1411","83357");
			LOCATIONS.put("1412","55926");
			LOCATIONS.put("1413","46943");
			LOCATIONS.put("1414","83358");
			LOCATIONS.put("1415","64493");
			LOCATIONS.put("1416","83359");
			LOCATIONS.put("1417","51062");
			LOCATIONS.put("1418","74884");
			LOCATIONS.put("1419","83360");
			LOCATIONS.put("1420","55926");
			LOCATIONS.put("1421","56074");
			LOCATIONS.put("1422","83361");
			LOCATIONS.put("1423","63224");
			LOCATIONS.put("1424","56453");
			LOCATIONS.put("1425","56763");
			LOCATIONS.put("1426","83356");
			LOCATIONS.put("1997","56624");
			LOCATIONS.put("1998","56624");
			LOCATIONS.put("1999","56624");
			LOCATIONS.put("2000","56624");
			LOCATIONS.put("2001","56624");
			LOCATIONS.put("2002","56624");
			LOCATIONS.put("1825","51320");
			LOCATIONS.put("2660","51336");
			LOCATIONS.put("2661","51336");
			LOCATIONS.put("2662","51336");
			LOCATIONS.put("2663","51336");
			LOCATIONS.put("2664","51336");
			LOCATIONS.put("2665","51336");
			LOCATIONS.put("2725","51376");
			LOCATIONS.put("1865","51376");
			LOCATIONS.put("2701","83362");
			LOCATIONS.put("2702","83362");
			LOCATIONS.put("2703","83362");
			LOCATIONS.put("2704","83362");
			LOCATIONS.put("2705","83362");
			LOCATIONS.put("1986","80893");
			LOCATIONS.put("2636","83363");
			LOCATIONS.put("2637","83363");
			LOCATIONS.put("2638","83363");
			LOCATIONS.put("2639","83363");
			LOCATIONS.put("2999","83363");
			LOCATIONS.put("2640","83363");
			LOCATIONS.put("2659","83363");
			LOCATIONS.put("2641","83363");
			LOCATIONS.put("2892","83363");
			LOCATIONS.put("2856","83363");
			LOCATIONS.put("1567","83364");
			LOCATIONS.put("1568","51329");
			LOCATIONS.put("1569","83365");
			LOCATIONS.put("1570","53917");
			LOCATIONS.put("1499","45297");
			LOCATIONS.put("1500","45343");
			LOCATIONS.put("1501","45499");
			LOCATIONS.put("1502","45734");
			LOCATIONS.put("1503","46391");
			LOCATIONS.put("1504","47330");
			LOCATIONS.put("1505","48156");
			LOCATIONS.put("1506","48271");
			LOCATIONS.put("1507","48569");
			LOCATIONS.put("1508","49556");
			LOCATIONS.put("1509","49895");
			LOCATIONS.put("1510","47319");
			LOCATIONS.put("1511","51156");
			LOCATIONS.put("1512","48569");
			LOCATIONS.put("1513","51189");
			LOCATIONS.put("1514","52707");
			LOCATIONS.put("1515","52724");
			LOCATIONS.put("1516","53999");
			LOCATIONS.put("1517","54414");
			LOCATIONS.put("1518","55911");
			LOCATIONS.put("1519","55333");
			LOCATIONS.put("1520","55336");
			LOCATIONS.put("1521","55351");
			LOCATIONS.put("1522","55934");
			LOCATIONS.put("1523","56540");
			LOCATIONS.put("1524","57431");
			LOCATIONS.put("1531","46017");
			LOCATIONS.put("1532","46964");
			LOCATIONS.put("1533","48572");
			LOCATIONS.put("1534","50016");
			LOCATIONS.put("1535","50134");
			LOCATIONS.put("1536","49387");
			LOCATIONS.put("1537","50231");
			LOCATIONS.put("1538","51405");
			LOCATIONS.put("1539","51722");
			LOCATIONS.put("1540","51731");
			LOCATIONS.put("1541","52001");
			LOCATIONS.put("1542","53936");
			LOCATIONS.put("1543","54809");
			LOCATIONS.put("1544","55102");
			LOCATIONS.put("1545","55356");
			LOCATIONS.put("1546","47013");
			LOCATIONS.put("1547","55747");
			LOCATIONS.put("1548","56690");
			LOCATIONS.put("1549","83366");
			LOCATIONS.put("1550","45969");
			LOCATIONS.put("1551","45999");
			LOCATIONS.put("1552","47108");
			LOCATIONS.put("1553","47618");
			LOCATIONS.put("1554","48240");
			LOCATIONS.put("1555","50123");
			LOCATIONS.put("1556","50134");
			LOCATIONS.put("1557","50545");
			LOCATIONS.put("1558","51178");
			LOCATIONS.put("1559","51307");
			LOCATIONS.put("1560","51868");
			LOCATIONS.put("1561","53524");
			LOCATIONS.put("1562","53955");
			LOCATIONS.put("1563","54201");
			LOCATIONS.put("1564","55400");
			LOCATIONS.put("1565","57670");
			LOCATIONS.put("1566","57770");
			LOCATIONS.put("1372","83367");
			LOCATIONS.put("1373","46129");
			LOCATIONS.put("1374","46129");
			LOCATIONS.put("1375","46449");
			LOCATIONS.put("1376","47105");
			LOCATIONS.put("1377","83368");
			LOCATIONS.put("1378","47864");
			LOCATIONS.put("1379","47864");
			LOCATIONS.put("1380","47864");
			LOCATIONS.put("1381","83369");
			LOCATIONS.put("1382","83370");
			LOCATIONS.put("1383","51956");
			LOCATIONS.put("1384","52066");
			LOCATIONS.put("1385","52099");
			LOCATIONS.put("1386","53881");
			LOCATIONS.put("1387","83371");
			LOCATIONS.put("1388","48844");
			LOCATIONS.put("1389","54335");
			LOCATIONS.put("1390","54723");
			LOCATIONS.put("1391","55403");
			LOCATIONS.put("1392","78012");
			LOCATIONS.put("1393","56985");
			LOCATIONS.put("1394","57455");
			LOCATIONS.put("1395","57473");
			LOCATIONS.put("1396","57530");
			LOCATIONS.put("1397","57582");
			LOCATIONS.put("1607","46454");
			LOCATIONS.put("1608","69727");
			LOCATIONS.put("1609","50083");
			LOCATIONS.put("1610","53784");
			LOCATIONS.put("1242","52069");
			LOCATIONS.put("1243","83372");
			LOCATIONS.put("1244","46144");
			LOCATIONS.put("1246","64492");
			LOCATIONS.put("1247","83373");
			LOCATIONS.put("1248","78492");
			LOCATIONS.put("1249","83374");
			LOCATIONS.put("1250","83375");
			LOCATIONS.put("1251","83376");
			LOCATIONS.put("3210","83377");
			LOCATIONS.put("3211","83377");
			LOCATIONS.put("3353","51956");
			LOCATIONS.put("1826","51968");
			LOCATIONS.put("3020","51970");
			LOCATIONS.put("3021","51970");
			LOCATIONS.put("3022","51970");
			LOCATIONS.put("3023","51970");
			LOCATIONS.put("3024","51970");
			LOCATIONS.put("3025","51970");
			LOCATIONS.put("3026","51970");
			LOCATIONS.put("3027","51970");
			LOCATIONS.put("3028","51970");
			LOCATIONS.put("3029","51970");
			LOCATIONS.put("2871","51972");
			LOCATIONS.put("2863","51972");
			LOCATIONS.put("2864","51972");
			LOCATIONS.put("2865","51972");
			LOCATIONS.put("2866","51972");
			LOCATIONS.put("2867","51972");
			LOCATIONS.put("2868","51972");
			LOCATIONS.put("2869","51972");
			LOCATIONS.put("1737","47933");
			LOCATIONS.put("1738","47933");
			LOCATIONS.put("1739","48214");
			LOCATIONS.put("1740","48214");
			LOCATIONS.put("1741","83378");
			LOCATIONS.put("1742","63212");
			LOCATIONS.put("1743","51994");
			LOCATIONS.put("1744","83379");
			LOCATIONS.put("1745","83379");
			LOCATIONS.put("1746","83381");
			LOCATIONS.put("1747","83380");
			LOCATIONS.put("1748","83382");
			LOCATIONS.put("1749","83383");
			LOCATIONS.put("1750","83384");
			LOCATIONS.put("1751","83385");
			LOCATIONS.put("1752","83386");
			LOCATIONS.put("2095","83387");
			LOCATIONS.put("2096","83387");
			LOCATIONS.put("2080","83387");
			LOCATIONS.put("2081","83387");
			LOCATIONS.put("2082","83387");
			LOCATIONS.put("2083","83387");
			LOCATIONS.put("2084","83387");
			LOCATIONS.put("2085","83387");
			LOCATIONS.put("2086","83387");
			LOCATIONS.put("2087","83387");
			LOCATIONS.put("2088","83387");
			LOCATIONS.put("2089","83387");
			LOCATIONS.put("2090","83387");
			LOCATIONS.put("2091","83387");
			LOCATIONS.put("3299","36403");
			LOCATIONS.put("3300","36403");
			LOCATIONS.put("3301","36403");
			LOCATIONS.put("3302","36403");
			LOCATIONS.put("3303","36403");
			LOCATIONS.put("1616","83388");
			LOCATIONS.put("1617","83389");
			LOCATIONS.put("1618","48508");
			LOCATIONS.put("1619","83390");
			LOCATIONS.put("1620","53554");
			LOCATIONS.put("1622","57050");
			LOCATIONS.put("1623","57509");
			LOCATIONS.put("2471","83390");
			LOCATIONS.put("2472","83388");
			LOCATIONS.put("2473","83389");
			LOCATIONS.put("2474","48508");
			LOCATIONS.put("2475","52380");
			LOCATIONS.put("2476","53554");
			LOCATIONS.put("2477","57509");
			LOCATIONS.put("2478","57050");
			LOCATIONS.put("1336","83391");
			LOCATIONS.put("1337","83391");
			LOCATIONS.put("1338","49979");
			LOCATIONS.put("1339","70143");
			LOCATIONS.put("1340","50878");
			LOCATIONS.put("1341","83392");
			LOCATIONS.put("1342","51026");
			LOCATIONS.put("1343","51224");
			LOCATIONS.put("1344","51320");
			LOCATIONS.put("1345","83393");
			LOCATIONS.put("1346","83394");
			LOCATIONS.put("1347","69450");
			LOCATIONS.put("1348","50924");
			LOCATIONS.put("1349","83391");
			LOCATIONS.put("1350","83391");
			LOCATIONS.put("2732","36330");
			LOCATIONS.put("1994","36330");
			LOCATIONS.put("1995","36330");
			LOCATIONS.put("1996","36330");
			LOCATIONS.put("1984","36330");
			LOCATIONS.put("1866","36330");
			LOCATIONS.put("1867","83395");
			LOCATIONS.put("1868","83396");
			LOCATIONS.put("1869","83397");
			LOCATIONS.put("1870","83398");
			LOCATIONS.put("1871","83399");
			LOCATIONS.put("1872","83400");
			LOCATIONS.put("1873","83401");
			LOCATIONS.put("1874","83401");
			LOCATIONS.put("1875","83402");
			LOCATIONS.put("1876","83403");
			LOCATIONS.put("1877","83403");
			LOCATIONS.put("1878","83403");
			LOCATIONS.put("1879","83404");
			LOCATIONS.put("1880","36253");
			LOCATIONS.put("1881","83405");
			LOCATIONS.put("1882","83405");
			LOCATIONS.put("1883","83405");
			LOCATIONS.put("1884","83405");
			LOCATIONS.put("1822","36170");
			LOCATIONS.put("1638","82840");
			LOCATIONS.put("1290","83406");
			LOCATIONS.put("1291","83407");
			LOCATIONS.put("1292","36225");
			LOCATIONS.put("1293","36225");
			LOCATIONS.put("1294","36225");
			LOCATIONS.put("1295","83407");
			LOCATIONS.put("1296","83408");
			LOCATIONS.put("1297","83409");
			LOCATIONS.put("1298","36225");
			LOCATIONS.put("1299","36225");
			LOCATIONS.put("1300","83407");
			LOCATIONS.put("1301","83407");
			LOCATIONS.put("1302","36324");
			LOCATIONS.put("1303","83410");
			LOCATIONS.put("1304","83411");
			LOCATIONS.put("1305","36324");
			LOCATIONS.put("1306","36324");
			LOCATIONS.put("1307","83412");
			LOCATIONS.put("1308","83413");
			LOCATIONS.put("1309","83410");
			LOCATIONS.put("1310","83414");
			LOCATIONS.put("1311","83414");
			LOCATIONS.put("1312","83414");
			LOCATIONS.put("1639","82840");
			LOCATIONS.put("1724","36403");
			LOCATIONS.put("1725","65507");
			LOCATIONS.put("1726","83415");
			LOCATIONS.put("1727","36299");
			LOCATIONS.put("1728","36403");
			LOCATIONS.put("1729","36403");
			LOCATIONS.put("1730","36403");
			LOCATIONS.put("1731","36403");
			LOCATIONS.put("1732","36403");
			LOCATIONS.put("1733","36403");
			LOCATIONS.put("1734","83416");
			LOCATIONS.put("1735","83417");
			LOCATIONS.put("1776","82840");
			LOCATIONS.put("3226","69376");
			LOCATIONS.put("1216","81560");
			LOCATIONS.put("1217","56374");
			LOCATIONS.put("1218","62689");
			LOCATIONS.put("1219","69376");
			LOCATIONS.put("1220","81639");
			LOCATIONS.put("1221","83418");
			LOCATIONS.put("1222","83419");
			LOCATIONS.put("1223","83420");
			LOCATIONS.put("1224","52444");
			LOCATIONS.put("1225","52444");
			LOCATIONS.put("1598","77511");
			LOCATIONS.put("1599","83421");
			LOCATIONS.put("1600","83421");
			LOCATIONS.put("1601","83422");
			LOCATIONS.put("1602","81989");
			LOCATIONS.put("1604","50575");
			LOCATIONS.put("1605","57989");
			LOCATIONS.put("1606","57522");
			LOCATIONS.put("3395","83423");
			LOCATIONS.put("3314","74274");
			LOCATIONS.put("3315","74274");
			LOCATIONS.put("3316","74274");
			LOCATIONS.put("3317","74274");
			LOCATIONS.put("3318","74274");
			LOCATIONS.put("1824","83393");
			LOCATIONS.put("1624","83424");
			LOCATIONS.put("1625","83425");
			LOCATIONS.put("1626","82229");
			LOCATIONS.put("1627","50937");
			LOCATIONS.put("1628","83426");
			LOCATIONS.put("1629","83424");
			LOCATIONS.put("1630","82359");
			LOCATIONS.put("1631","54153");
			LOCATIONS.put("3343","52710");
			LOCATIONS.put("3245","52714");
			LOCATIONS.put("3340","52720");
			LOCATIONS.put("3228","63215");
			LOCATIONS.put("2642","52908");
			LOCATIONS.put("2643","52908");
			LOCATIONS.put("2644","52908");
			LOCATIONS.put("2645","52908");
			LOCATIONS.put("2646","52908");
			LOCATIONS.put("2651","52908");
			LOCATIONS.put("2652","52908");
			LOCATIONS.put("2653","52908");
			LOCATIONS.put("2139","45601");
			LOCATIONS.put("2140","45601");
			LOCATIONS.put("2141","45601");
			LOCATIONS.put("2142","45601");
			LOCATIONS.put("2143","45601");
			LOCATIONS.put("1262","83427");
			LOCATIONS.put("2161","53021");
			LOCATIONS.put("2162","53021");
			LOCATIONS.put("2163","53021");
			LOCATIONS.put("2164","53021");
			LOCATIONS.put("2165","53021");
			LOCATIONS.put("2166","53021");
			LOCATIONS.put("2167","53021");
			LOCATIONS.put("2168","53021");
			LOCATIONS.put("2264","53021");
			LOCATIONS.put("2254","53021");
			LOCATIONS.put("2253","53021");
			LOCATIONS.put("2153","53021");
			LOCATIONS.put("2154","53021");
			LOCATIONS.put("2155","53021");
			LOCATIONS.put("2156","53021");
			LOCATIONS.put("2157","53021");
			LOCATIONS.put("2158","53021");
			LOCATIONS.put("2159","53021");
			LOCATIONS.put("2160","53021");
			LOCATIONS.put("1833","53021");
			LOCATIONS.put("3346","53021");
			LOCATIONS.put("1788","53042");
			LOCATIONS.put("1789","53042");
			LOCATIONS.put("1790","53042");
			LOCATIONS.put("1791","53042");
			LOCATIONS.put("3294","65523");
			LOCATIONS.put("3295","65523");
			LOCATIONS.put("3296","65523");
			LOCATIONS.put("3297","65523");
			LOCATIONS.put("3298","65523");
			LOCATIONS.put("1162","52002");
			LOCATIONS.put("1163","52002");
			LOCATIONS.put("1164","52002");
			LOCATIONS.put("1165","47455");
			LOCATIONS.put("1166","52002");
			LOCATIONS.put("1167","52002");
			LOCATIONS.put("1168","52002");
			LOCATIONS.put("1169","52002");
			LOCATIONS.put("1170","52002");
			LOCATIONS.put("1171","52002");
			LOCATIONS.put("1172","52002");
			LOCATIONS.put("1173","52002");
			LOCATIONS.put("1174","52002");
			LOCATIONS.put("1175","52002");
			LOCATIONS.put("1176","52002");
			LOCATIONS.put("1177","52002");
			LOCATIONS.put("1178","52002");
			LOCATIONS.put("3267","52002");
			LOCATIONS.put("1863","83428");
			LOCATIONS.put("2111","53454");
			LOCATIONS.put("2112","53454");
			LOCATIONS.put("2113","53454");
			LOCATIONS.put("2114","53454");
			LOCATIONS.put("2115","53454");
			LOCATIONS.put("2116","53454");
			LOCATIONS.put("2117","53454");
			LOCATIONS.put("2118","53454");
			LOCATIONS.put("2119","53454");
			LOCATIONS.put("2120","53454");
			LOCATIONS.put("2121","53454");
			LOCATIONS.put("2122","53454");
			LOCATIONS.put("2123","53454");
			LOCATIONS.put("2124","53454");
			LOCATIONS.put("2125","53454");
			LOCATIONS.put("2616","50017");
			LOCATIONS.put("2617","54166");
			LOCATIONS.put("2618","47157");
			LOCATIONS.put("2619","56713");
			LOCATIONS.put("2774","46386");
			LOCATIONS.put("2917","82094");
			LOCATIONS.put("2880","83429");
			LOCATIONS.put("2881","83430");
			LOCATIONS.put("2882","83430");
			LOCATIONS.put("2883","83430");
			LOCATIONS.put("2884","83430");
			LOCATIONS.put("2885","83430");
			LOCATIONS.put("2886","83430");
			LOCATIONS.put("2887","83430");
			LOCATIONS.put("2888","83430");
			LOCATIONS.put("2889","83430");
			LOCATIONS.put("2890","83430");
			LOCATIONS.put("2891","83430");
			LOCATIONS.put("3271","83541");
			LOCATIONS.put("3272","83541");
			LOCATIONS.put("3273","83541");
			LOCATIONS.put("3274","83541");
			LOCATIONS.put("2730","65523");
			LOCATIONS.put("1322","57094");
			LOCATIONS.put("1323","83431");
			LOCATIONS.put("1324","57094");
			LOCATIONS.put("1325","83432");
			LOCATIONS.put("1326","50434");
			LOCATIONS.put("1327","50881");
			LOCATIONS.put("1328","50899");
			LOCATIONS.put("1329","54053");
			LOCATIONS.put("1330","83433");
			LOCATIONS.put("1331","50434");
			LOCATIONS.put("1332","83434");
			LOCATIONS.put("1333","54053");
			LOCATIONS.put("1334","83435");
			LOCATIONS.put("1335","57102");
			LOCATIONS.put("2695","53616");
			LOCATIONS.put("2696","53616");
			LOCATIONS.put("2697","53616");
			LOCATIONS.put("2698","53616");
			LOCATIONS.put("2699","53616");
			LOCATIONS.put("2686","53616");
			LOCATIONS.put("2687","53616");
			LOCATIONS.put("2688","53616");
			LOCATIONS.put("2689","53616");
			LOCATIONS.put("2690","53616");
			LOCATIONS.put("2872","53616");
			LOCATIONS.put("2788","53617");
			LOCATIONS.put("2789","53617");
			LOCATIONS.put("1100","53617");
			LOCATIONS.put("1101","53617");
			LOCATIONS.put("1102","53617");
			LOCATIONS.put("1103","53617");
			LOCATIONS.put("1104","53617");
			LOCATIONS.put("1072","53617");
			LOCATIONS.put("1073","53617");
			LOCATIONS.put("1074","53617");
			LOCATIONS.put("1075","53617");
			LOCATIONS.put("1076","53617");
			LOCATIONS.put("1077","53617");
			LOCATIONS.put("1846","53617");
			LOCATIONS.put("3212","53619");
			LOCATIONS.put("2861","53620");
			LOCATIONS.put("2832","53620");
			LOCATIONS.put("2833","53620");
			LOCATIONS.put("2834","53620");
			LOCATIONS.put("2835","53620");
			LOCATIONS.put("2836","53620");
			LOCATIONS.put("2837","53620");
			LOCATIONS.put("2838","53620");
			LOCATIONS.put("3232","53625");
			LOCATIONS.put("1856","53621");
			LOCATIONS.put("2194","51818");
			LOCATIONS.put("2234","53783");
			LOCATIONS.put("2235","53783");
			LOCATIONS.put("2147","53783");
			LOCATIONS.put("2144","53783");
			LOCATIONS.put("2145","53783");
			LOCATIONS.put("2146","53783");
			LOCATIONS.put("2249","53783");
			LOCATIONS.put("2748","53783");
			LOCATIONS.put("2749","51104");
			LOCATIONS.put("2750","53783");
			LOCATIONS.put("2751","53783");
			LOCATIONS.put("2752","79294");
			LOCATIONS.put("2753","53783");
			LOCATIONS.put("2754","47969");
			LOCATIONS.put("2755","47408");
			LOCATIONS.put("2756","83436");
			LOCATIONS.put("2757","53783");
			LOCATIONS.put("2758","54390");
			LOCATIONS.put("2759","49915");
			LOCATIONS.put("2726","53783");
			LOCATIONS.put("1128","53783");
			LOCATIONS.put("1129","83439");
			LOCATIONS.put("1130","51104");
			LOCATIONS.put("1131","51230");
			LOCATIONS.put("1132","83438");
			LOCATIONS.put("1133","83437");
			LOCATIONS.put("1134","83440");
			LOCATIONS.put("1135","45347");
			LOCATIONS.put("2953","81018");
			LOCATIONS.put("2954","81018");
			LOCATIONS.put("2955","81018");
			LOCATIONS.put("2956","81018");
			LOCATIONS.put("2957","81018");
			LOCATIONS.put("3145","0");
			LOCATIONS.put("3150","0");
			LOCATIONS.put("3097","0");
			LOCATIONS.put("3152","0");
			LOCATIONS.put("3099","0");
			LOCATIONS.put("3102","0");
			LOCATIONS.put("3155","0");
			LOCATIONS.put("3157","0");
			LOCATIONS.put("3104","0");
			LOCATIONS.put("3105","0");
			LOCATIONS.put("3158","0");
			LOCATIONS.put("3106","0");
			LOCATIONS.put("3107","0");
			LOCATIONS.put("3160","0");
			LOCATIONS.put("3169","0");
			LOCATIONS.put("3116","0");
			LOCATIONS.put("3115","0");
			LOCATIONS.put("3168","0");
			LOCATIONS.put("3167","0");
			LOCATIONS.put("3114","0");
			LOCATIONS.put("3117","0");
			LOCATIONS.put("3170","0");
			LOCATIONS.put("3128","0");
			LOCATIONS.put("3181","0");
			LOCATIONS.put("3177","0");
			LOCATIONS.put("3124","0");
			LOCATIONS.put("3125","0");
			LOCATIONS.put("3178","0");
			LOCATIONS.put("3179","0");
			LOCATIONS.put("3126","0");
			LOCATIONS.put("3123","0");
			LOCATIONS.put("3176","0");
			LOCATIONS.put("3184","0");
			LOCATIONS.put("3131","0");
			LOCATIONS.put("3133","0");
			LOCATIONS.put("3186","0");
			LOCATIONS.put("3191","0");
			LOCATIONS.put("3138","0");
			LOCATIONS.put("3139","0");
			LOCATIONS.put("3192","0");
			LOCATIONS.put("3196","0");
			LOCATIONS.put("3143","0");
			LOCATIONS.put("3142","0");
			LOCATIONS.put("3195","0");
			LOCATIONS.put("3144","0");
			LOCATIONS.put("1847","48283");
			LOCATIONS.put("1848","51029");
			LOCATIONS.put("1849","51107");
			LOCATIONS.put("1850","82272");
			LOCATIONS.put("1851","82272");
			LOCATIONS.put("1852","82272");
			LOCATIONS.put("1853","82272");
			LOCATIONS.put("2283","82272");
			LOCATIONS.put("2463","82272");
			LOCATIONS.put("2464","82247");
			LOCATIONS.put("2465","48283");
			LOCATIONS.put("2466","82272");
			LOCATIONS.put("2467","51029");
			LOCATIONS.put("2468","51029");
			LOCATIONS.put("2469","82272");
			LOCATIONS.put("2470","82272");
			LOCATIONS.put("2169","82272");
			LOCATIONS.put("2170","82272");
			LOCATIONS.put("2171","82272");
			LOCATIONS.put("2172","82272");
			LOCATIONS.put("2173","82272");
			LOCATIONS.put("2174","82272");
			LOCATIONS.put("2175","82272");
			LOCATIONS.put("2176","82272");
			LOCATIONS.put("2177","82272");
			LOCATIONS.put("1989","83441");
			LOCATIONS.put("2058","82272");
			LOCATIONS.put("2059","82272");
			LOCATIONS.put("2060","48283");
			LOCATIONS.put("2061","51029");
			LOCATIONS.put("2062","82272");
			LOCATIONS.put("2063","51029");
			LOCATIONS.put("2064","83442");
			LOCATIONS.put("2065","82247");
			LOCATIONS.put("1611","83443");
			LOCATIONS.put("1612","54577");
			LOCATIONS.put("1613","83444");
			LOCATIONS.put("1614","83445");
			LOCATIONS.put("2320","53910");
			LOCATIONS.put("2321","53910");
			LOCATIONS.put("2322","53910");
			LOCATIONS.put("2323","53910");
			LOCATIONS.put("2324","53910");
			LOCATIONS.put("2325","53910");
			LOCATIONS.put("2372","53910");
			LOCATIONS.put("2373","53910");
			LOCATIONS.put("2374","53910");
			LOCATIONS.put("3230","53911");
			LOCATIONS.put("2313","54112");
			LOCATIONS.put("2314","83446");
			LOCATIONS.put("2315","48134");
			LOCATIONS.put("2151","54111");
			LOCATIONS.put("2251","54111");
			LOCATIONS.put("2014","83447");
			LOCATIONS.put("2015","53963");
			LOCATIONS.put("2016","53963");
			LOCATIONS.put("1784","53963");
			LOCATIONS.put("3402","53963");
			LOCATIONS.put("2127","53994");
			LOCATIONS.put("2128","53994");
			LOCATIONS.put("2129","53994");
			LOCATIONS.put("2130","53994");
			LOCATIONS.put("1823","83448");
			LOCATIONS.put("3359","54216");
			LOCATIONS.put("2765","83449");
			LOCATIONS.put("2766","83449");
			LOCATIONS.put("2767","83449");
			LOCATIONS.put("3221","81312");
			LOCATIONS.put("3222","81312");
			LOCATIONS.put("3223","81312");
			LOCATIONS.put("3030","81312");
			LOCATIONS.put("3031","83450");
			LOCATIONS.put("3032","81082");
			LOCATIONS.put("3033","49858");
			LOCATIONS.put("3034","81298");
			LOCATIONS.put("3035","45556");
			LOCATIONS.put("3036","53351");
			LOCATIONS.put("3037","55402");
			LOCATIONS.put("3038","55348");
			LOCATIONS.put("3039","69755");
			LOCATIONS.put("3040","81312");
			LOCATIONS.put("2943","81312");
			LOCATIONS.put("2944","81312");
			LOCATIONS.put("2945","81312");
			LOCATIONS.put("2946","81312");
			LOCATIONS.put("2947","81312");
			LOCATIONS.put("2948","52959");
			LOCATIONS.put("2949","52959");
			LOCATIONS.put("2950","52959");
			LOCATIONS.put("2951","52959");
			LOCATIONS.put("2952","52959");
			LOCATIONS.put("2958","52959");
			LOCATIONS.put("2959","52959");
			LOCATIONS.put("2960","52959");
			LOCATIONS.put("2961","52959");
			LOCATIONS.put("2964","52959");
			LOCATIONS.put("2965","52959");
			LOCATIONS.put("3041","52959");
			LOCATIONS.put("2967","63098");
			LOCATIONS.put("2870","63098");
			LOCATIONS.put("3268","63098");
			LOCATIONS.put("3269","63098");
			LOCATIONS.put("3270","63098");
			LOCATIONS.put("2626","63098");
			LOCATIONS.put("2613","63098");
			LOCATIONS.put("2614","63098");
			LOCATIONS.put("2615","63098");
			LOCATIONS.put("2580","63098");
			LOCATIONS.put("2581","63098");
			LOCATIONS.put("2582","63098");
			LOCATIONS.put("3337","54625");
			LOCATIONS.put("2854","54577");
			LOCATIONS.put("2855","83444");
			LOCATIONS.put("2733","36402");
			LOCATIONS.put("2731","36403");
			LOCATIONS.put("3258","36403");
			LOCATIONS.put("3201","83451");
			LOCATIONS.put("3202","83451");
			LOCATIONS.put("3214","83452");
			LOCATIONS.put("3252","54683");
			LOCATIONS.put("1990","0");
			LOCATIONS.put("1992","0");
			LOCATIONS.put("1993","0");
			LOCATIONS.put("2583","55983");
			LOCATIONS.put("2584","83453");
			LOCATIONS.put("2576","54843");
			LOCATIONS.put("1051","0");
			LOCATIONS.put("1052","0");
			LOCATIONS.put("1053","0");
			LOCATIONS.put("1054","0");
			LOCATIONS.put("1055","0");
			LOCATIONS.put("3250","54978");
			LOCATIONS.put("2734","65978");
			LOCATIONS.put("2135","55038");
			LOCATIONS.put("2136","55038");
			LOCATIONS.put("2137","55038");
			LOCATIONS.put("2138","55038");
			LOCATIONS.put("2489","36402");
			LOCATIONS.put("2490","36402");
			LOCATIONS.put("2491","36402");
			LOCATIONS.put("2492","36402");
			LOCATIONS.put("2493","36402");
			LOCATIONS.put("2494","36402");
			LOCATIONS.put("2495","36402");
			LOCATIONS.put("2496","36402");
			LOCATIONS.put("2497","36402");
			LOCATIONS.put("3239","36402");
			LOCATIONS.put("2510","55200");
			LOCATIONS.put("2511","55200");
			LOCATIONS.put("2512","55200");
			LOCATIONS.put("2513","55200");
			LOCATIONS.put("2514","55200");
			LOCATIONS.put("2515","55200");
			LOCATIONS.put("2516","55200");
			LOCATIONS.put("2517","55200");
			LOCATIONS.put("2518","55200");
			LOCATIONS.put("2519","55200");
			LOCATIONS.put("2378","55200");
			LOCATIONS.put("2379","55200");
			LOCATIONS.put("2380","55200");
			LOCATIONS.put("2381","55200");
			LOCATIONS.put("3246","66300");
			LOCATIONS.put("3404","55314");
			LOCATIONS.put("3203","55324");
			LOCATIONS.put("3357","55331");
			LOCATIONS.put("2398","55331");
			LOCATIONS.put("2399","55331");
			LOCATIONS.put("2400","55331");
			LOCATIONS.put("2401","55331");
			LOCATIONS.put("2402","55331");
			LOCATIONS.put("2403","55331");
			LOCATIONS.put("2404","55331");
			LOCATIONS.put("2405","55331");
			LOCATIONS.put("2406","55331");
			LOCATIONS.put("2407","55331");
			LOCATIONS.put("1113","53625");
			LOCATIONS.put("1114","46926");
			LOCATIONS.put("1115","48708");
			LOCATIONS.put("1116","48063");
			LOCATIONS.put("1117","51175");
			LOCATIONS.put("1118","50604");
			LOCATIONS.put("1119","83454");
			LOCATIONS.put("1120","83454");
			LOCATIONS.put("1121","83455");
			LOCATIONS.put("1122","83456");
			LOCATIONS.put("1123","53615");
			LOCATIONS.put("1124","83457");
			LOCATIONS.put("1125","83458");
			LOCATIONS.put("1126","54716");
			LOCATIONS.put("1127","47709");
			LOCATIONS.put("1321","83459");
			LOCATIONS.put("2877","81850");
			LOCATIONS.put("2878","81850");
			LOCATIONS.put("2879","81850");
			LOCATIONS.put("2388","55392");
			LOCATIONS.put("2389","55392");
			LOCATIONS.put("2390","55392");
			LOCATIONS.put("2391","55392");
			LOCATIONS.put("2392","55392");
			LOCATIONS.put("2393","55392");
			LOCATIONS.put("2394","55392");
			LOCATIONS.put("2395","55392");
			LOCATIONS.put("2396","55392");
			LOCATIONS.put("2397","55392");
			LOCATIONS.put("2289","55392");
			LOCATIONS.put("2290","55392");
			LOCATIONS.put("2291","55392");
			LOCATIONS.put("2292","55392");
			LOCATIONS.put("2293","55392");
			LOCATIONS.put("3352","55399");
			LOCATIONS.put("1582","49571");
			LOCATIONS.put("1583","83460");
			LOCATIONS.put("1584","55420");
			LOCATIONS.put("1585","55420");
			LOCATIONS.put("1586","55483");
			LOCATIONS.put("1587","83461");
			LOCATIONS.put("3336","83462");
			LOCATIONS.put("3235","70686");
			LOCATIONS.put("3326","83463");
			LOCATIONS.put("1063","83463");
			LOCATIONS.put("1064","83463");
			LOCATIONS.put("1065","83463");
			LOCATIONS.put("1066","83463");
			LOCATIONS.put("1067","83463");
			LOCATIONS.put("2589","83463");
			LOCATIONS.put("3341","81386");
			LOCATIONS.put("3255","83464");
			LOCATIONS.put("2694","55533");
			LOCATIONS.put("2700","69565");
			LOCATIONS.put("2375","69565");
			LOCATIONS.put("2376","69565");
			LOCATIONS.put("2377","69565");
			LOCATIONS.put("2370","69565");
			LOCATIONS.put("2371","69565");
			LOCATIONS.put("1094","69565");
			LOCATIONS.put("1095","69565");
			LOCATIONS.put("1096","69565");
			LOCATIONS.put("1097","69565");
			LOCATIONS.put("1098","69565");
			LOCATIONS.put("1099","69565");
			LOCATIONS.put("1857","83465");
			LOCATIONS.put("1656","55548");
			LOCATIONS.put("3401","69568");
			LOCATIONS.put("3247","55670");
			LOCATIONS.put("2648","0");
			LOCATIONS.put("2649","0");
			LOCATIONS.put("2650","0");
			LOCATIONS.put("2277","46435");
			LOCATIONS.put("2278","51018");
			LOCATIONS.put("2279","47675");
			LOCATIONS.put("2280","81493");
			LOCATIONS.put("1782","81493");
			LOCATIONS.put("2711","57713");
			LOCATIONS.put("2712","57713");
			LOCATIONS.put("2713","51376");
			LOCATIONS.put("2714","51376");
			LOCATIONS.put("2715","53783");
			LOCATIONS.put("2716","53783");
			LOCATIONS.put("2717","36330");
			LOCATIONS.put("2718","36403");
			LOCATIONS.put("2719","65978");
			LOCATIONS.put("2720","36402");
			LOCATIONS.put("2721","65523");
			LOCATIONS.put("2722","36133");
			LOCATIONS.put("2107","55863");
			LOCATIONS.put("2108","55863");
			LOCATIONS.put("2109","55863");
			LOCATIONS.put("2066","55863");
			LOCATIONS.put("2067","55863");
			LOCATIONS.put("2068","55863");
			LOCATIONS.put("2069","55863");
			LOCATIONS.put("2070","55863");
			LOCATIONS.put("2071","55863");
			LOCATIONS.put("2072","55863");
			LOCATIONS.put("2073","55863");
			LOCATIONS.put("2628","47144");
			LOCATIONS.put("2629","47144");
			LOCATIONS.put("2630","47144");
			LOCATIONS.put("2631","47144");
			LOCATIONS.put("2632","47144");
			LOCATIONS.put("2633","47144");
			LOCATIONS.put("2634","47144");
			LOCATIONS.put("2654","47144");
			LOCATIONS.put("3405","55924");
			LOCATIONS.put("2003","55926");
			LOCATIONS.put("2004","55926");
			LOCATIONS.put("2005","55926");
			LOCATIONS.put("2006","55926");
			LOCATIONS.put("3248","55961");
			LOCATIONS.put("3101","55966");
			LOCATIONS.put("3253","55975");
			LOCATIONS.put("3204","69548");
			LOCATIONS.put("3205","69548");
			LOCATIONS.put("3351","56084");
			LOCATIONS.put("3373","83466");
			LOCATIONS.put("3374","83466");
			LOCATIONS.put("3375","83466");
			LOCATIONS.put("3376","83466");
			LOCATIONS.put("3377","83466");
			LOCATIONS.put("3378","83466");
			LOCATIONS.put("2841","58256");
			LOCATIONS.put("2842","58256");
			LOCATIONS.put("2843","58256");
			LOCATIONS.put("2844","58256");
			LOCATIONS.put("3379","82285");
			LOCATIONS.put("3380","82285");
			LOCATIONS.put("3381","82285");
			LOCATIONS.put("3382","82285");
			LOCATIONS.put("3383","82285");
			LOCATIONS.put("3384","82285");
			LOCATIONS.put("3213","81381");
			LOCATIONS.put("1858","83467");
			LOCATIONS.put("2635","68027");
			LOCATIONS.put("1799","9023");
			LOCATIONS.put("3393","56531");
			LOCATIONS.put("1798","44187");
			LOCATIONS.put("3251","83458");
			LOCATIONS.put("1105","71165");
			LOCATIONS.put("1106","57692");
			LOCATIONS.put("1107","57692");
			LOCATIONS.put("1108","57692");
			LOCATIONS.put("1109","57692");
			LOCATIONS.put("1110","57692");
			LOCATIONS.put("1111","57692");
			LOCATIONS.put("1112","57692");
			LOCATIONS.put("2723","57692");
			LOCATIONS.put("2724","57692");
			LOCATIONS.put("3000","56671");
			LOCATIONS.put("3001","56671");
			LOCATIONS.put("3002","56671");
			LOCATIONS.put("3003","56671");
			LOCATIONS.put("3004","56671");
			LOCATIONS.put("3005","56671");
			LOCATIONS.put("3006","56671");
			LOCATIONS.put("3007","56671");
			LOCATIONS.put("3008","56671");
			LOCATIONS.put("3009","56671");
			LOCATIONS.put("2783","83469");
			LOCATIONS.put("2784","83469");
			LOCATIONS.put("2785","83469");
			LOCATIONS.put("2786","83469");
			LOCATIONS.put("2787","83469");
			LOCATIONS.put("2603","83469");
			LOCATIONS.put("2604","83469");
			LOCATIONS.put("2605","83469");
			LOCATIONS.put("2606","83469");
			LOCATIONS.put("2607","83469");
			LOCATIONS.put("2608","83469");
			LOCATIONS.put("2609","83469");
			LOCATIONS.put("2775","83469");
			LOCATIONS.put("2776","83469");
			LOCATIONS.put("2777","83469");
			LOCATIONS.put("2778","83469");
			LOCATIONS.put("2779","83469");
			LOCATIONS.put("2780","83469");
			LOCATIONS.put("2781","83469");
			LOCATIONS.put("2741","83469");
			LOCATIONS.put("2742","83469");
			LOCATIONS.put("2743","83469");
			LOCATIONS.put("2744","83469");
			LOCATIONS.put("2745","83469");
			LOCATIONS.put("2746","83469");
			LOCATIONS.put("2747","83469");
			LOCATIONS.put("2074","83469");
			LOCATIONS.put("2075","83469");
			LOCATIONS.put("2076","83469");
			LOCATIONS.put("2077","83469");
			LOCATIONS.put("2078","83469");
			LOCATIONS.put("2079","83469");
			LOCATIONS.put("2992","83469");
			LOCATIONS.put("2993","83469");
			LOCATIONS.put("2994","83469");
			LOCATIONS.put("2995","83469");
			LOCATIONS.put("2996","83469");
			LOCATIONS.put("2577","56763");
			LOCATIONS.put("2578","56763");
			LOCATIONS.put("2579","56763");
			LOCATIONS.put("2106","83470");
			LOCATIONS.put("3010","83471");
			LOCATIONS.put("3011","83471");
			LOCATIONS.put("3012","83471");
			LOCATIONS.put("3013","83471");
			LOCATIONS.put("3014","83471");
			LOCATIONS.put("3015","83471");
			LOCATIONS.put("3016","83471");
			LOCATIONS.put("3017","83471");
			LOCATIONS.put("3018","83471");
			LOCATIONS.put("3019","83471");
			LOCATIONS.put("2110","56809");
			LOCATIONS.put("2098","56809");
			LOCATIONS.put("2099","56809");
			LOCATIONS.put("2100","56809");
			LOCATIONS.put("2101","56809");
			LOCATIONS.put("2102","56809");
			LOCATIONS.put("2103","56809");
			LOCATIONS.put("2104","56809");
			LOCATIONS.put("2105","56809");
			LOCATIONS.put("2488","56809");
			LOCATIONS.put("2336","56826");
			LOCATIONS.put("2243","56826");
			LOCATIONS.put("2244","56826");
			LOCATIONS.put("3256","56877");
			LOCATIONS.put("1588","83472");
			LOCATIONS.put("1589","81986");
			LOCATIONS.put("1590","48909");
			LOCATIONS.put("1591","83473");
			LOCATIONS.put("1592","66275");
			LOCATIONS.put("1593","83474");
			LOCATIONS.put("1594","83475");
			LOCATIONS.put("1595","83476");
			LOCATIONS.put("1596","55375");
			LOCATIONS.put("1226","51010");
			LOCATIONS.put("1227","65846");
			LOCATIONS.put("1228","56497");
			LOCATIONS.put("1229","54324");
			LOCATIONS.put("1230","83477");
			LOCATIONS.put("1231","50679");
			LOCATIONS.put("1232","50679");
			LOCATIONS.put("1233","50679");
			LOCATIONS.put("1234","83478");
			LOCATIONS.put("1235","83479");
			LOCATIONS.put("1236","83479");
			LOCATIONS.put("1237","69339");
			LOCATIONS.put("1238","75998");
			LOCATIONS.put("1239","81585");
			LOCATIONS.put("1240","81585");
			LOCATIONS.put("1241","75627");
			LOCATIONS.put("3096","0");
			LOCATIONS.put("3149","0");
			LOCATIONS.put("3148","0");
			LOCATIONS.put("3095","0");
			LOCATIONS.put("3098","0");
			LOCATIONS.put("3151","0");
			LOCATIONS.put("3153","0");
			LOCATIONS.put("3100","0");
			LOCATIONS.put("3154","0");
			LOCATIONS.put("3156","0");
			LOCATIONS.put("3103","0");
			LOCATIONS.put("3159","0");
			LOCATIONS.put("3163","0");
			LOCATIONS.put("3110","0");
			LOCATIONS.put("3108","0");
			LOCATIONS.put("3161","0");
			LOCATIONS.put("3162","0");
			LOCATIONS.put("3109","0");
			LOCATIONS.put("3111","0");
			LOCATIONS.put("3164","0");
			LOCATIONS.put("3165","0");
			LOCATIONS.put("3112","0");
			LOCATIONS.put("3113","0");
			LOCATIONS.put("3166","0");
			LOCATIONS.put("3171","0");
			LOCATIONS.put("3118","0");
			LOCATIONS.put("3120","0");
			LOCATIONS.put("3173","0");
			LOCATIONS.put("3119","0");
			LOCATIONS.put("3172","0");
			LOCATIONS.put("3121","0");
			LOCATIONS.put("3174","0");
			LOCATIONS.put("3182","0");
			LOCATIONS.put("3129","0");
			LOCATIONS.put("3122","0");
			LOCATIONS.put("3175","0");
			LOCATIONS.put("3180","0");
			LOCATIONS.put("3127","0");
			LOCATIONS.put("3130","0");
			LOCATIONS.put("3183","0");
			LOCATIONS.put("3185","0");
			LOCATIONS.put("3132","0");
			LOCATIONS.put("3134","0");
			LOCATIONS.put("3187","0");
			LOCATIONS.put("3188","0");
			LOCATIONS.put("3135","0");
			LOCATIONS.put("3189","0");
			LOCATIONS.put("3190","0");
			LOCATIONS.put("3137","0");
			LOCATIONS.put("3140","0");
			LOCATIONS.put("3193","0");
			LOCATIONS.put("3194","0");
			LOCATIONS.put("3141","0");
			LOCATIONS.put("3197","0");
			LOCATIONS.put("3199","0");
			LOCATIONS.put("3146","0");
			LOCATIONS.put("3198","0");
			LOCATIONS.put("3200","0");
			LOCATIONS.put("3147","0");
			LOCATIONS.put("1829","56917");
			LOCATIONS.put("1864","0");
			LOCATIONS.put("2331","0");
			LOCATIONS.put("2332","0");
			LOCATIONS.put("2498","0");
			LOCATIONS.put("2499","0");
			LOCATIONS.put("2500","0");
			LOCATIONS.put("2501","0");
			LOCATIONS.put("2502","0");
			LOCATIONS.put("3206","69321");
			LOCATIONS.put("3207","69321");
			LOCATIONS.put("3249","57251");
			LOCATIONS.put("3355","57401");
			LOCATIONS.put("2250","56473");
			LOCATIONS.put("2148","56473");
			LOCATIONS.put("2149","56473");
			LOCATIONS.put("2150","56473");
			LOCATIONS.put("1915","57458");
			LOCATIONS.put("1916","57458");
			LOCATIONS.put("1917","57458");
			LOCATIONS.put("1918","57458");
			LOCATIONS.put("1919","57458");
			LOCATIONS.put("1920","57458");
			LOCATIONS.put("1921","57458");
			LOCATIONS.put("1922","57458");
			LOCATIONS.put("1923","57458");
			LOCATIONS.put("3227","83480");
			LOCATIONS.put("3229","83480");
			LOCATIONS.put("1783","83542");
			LOCATIONS.put("2294","65920");
			LOCATIONS.put("2295","65920");
			LOCATIONS.put("2296","65920");
			LOCATIONS.put("2297","65920");
			LOCATIONS.put("2299","65920");
			LOCATIONS.put("2300","65920");
			LOCATIONS.put("2301","65920");
			LOCATIONS.put("2302","65920");
			LOCATIONS.put("2303","65920");
			LOCATIONS.put("2304","65920");
			LOCATIONS.put("2727","57713");
			LOCATIONS.put("3215","55887");
			LOCATIONS.put("3216","55887");
			LOCATIONS.put("3217","55887");
			LOCATIONS.put("3218","55887");
			LOCATIONS.put("3219","55887");
			LOCATIONS.put("2335","57882");
			LOCATIONS.put("1859","57882");
			LOCATIONS.put("2503","57387");
			LOCATIONS.put("2504","53654");
			LOCATIONS.put("2505","82055");
			LOCATIONS.put("2506","83481");
			LOCATIONS.put("2507","83482");
			LOCATIONS.put("2508","50967");
			LOCATIONS.put("2509","82053");
			LOCATIONS.put("2590","83483");
			LOCATIONS.put("2236","83476");
			LOCATIONS.put("2237","83485");
			LOCATIONS.put("2238","83485");
			LOCATIONS.put("2239","83476");
			LOCATIONS.put("2240","58006");
			LOCATIONS.put("2241","58006");
			LOCATIONS.put("3283","55248");
			LOCATIONS.put("2857","81429");
			LOCATIONS.put("2858","81429");
			LOCATIONS.put("2859","81429");
			LOCATIONS.put("2860","81429");
			LOCATIONS.put("2845","81429");
			LOCATIONS.put("2846","81429");
			LOCATIONS.put("2847","81429");
			LOCATIONS.put("2848","81429");
			LOCATIONS.put("2849","81429");
			LOCATIONS.put("2918","58038");
			LOCATIONS.put("2919","58038");
			LOCATIONS.put("2920","58038");
			LOCATIONS.put("2921","58038");
			LOCATIONS.put("2922","58038");
			LOCATIONS.put("2923","58038");
			LOCATIONS.put("2924","58038");
			LOCATIONS.put("2925","58038");
			LOCATIONS.put("2927","58038");
		}
		if (location == null) {LOG.error("getLocationid null");}
		else if (LOCATIONS.get(location) == null) {LOG.error("getLocationid " + location);}
		else {return LOCATIONS.get(location);}
		return null;
	}

	private static HashMap<String,Price.Rule> RULES = null;

	private static final String getRule(String rule) {
		if (RULES == null) {
			RULES = new HashMap<String, Price.Rule>();
			RULES.put("1",Price.Rule.SunCheckIn);//1 = Sunday
			RULES.put("2",Price.Rule.MonCheckIn);//2 = Monday
			RULES.put("4",Price.Rule.TueCheckIn);//4 = Tuesday
			RULES.put("8",Price.Rule.WedCheckIn);//8 = Wednesday
			RULES.put("16",Price.Rule.ThuCheckIn);//16 = Thursday
			RULES.put("32",Price.Rule.FriCheckIn);//32 = Friday
			RULES.put("64",Price.Rule.SatCheckIn);//64 = Saturday
			RULES.put("127",Price.Rule.AnyCheckIn);//127 = Any Day
		}
		if (rule == null || RULES.get(rule) == null) {return Price.Rule.AnyCheckIn.name();}
		else {return RULES.get(rule).name();}
	}

	@Override
	public ReservationPrice readPrice(SqlSession sqlSession, Reservation reservation, String productAltId, String currency) {
		// TODO Auto-generated method stub
		return null;
	}

	public void readDescriptions() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void readImages() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void readAdditionCosts() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void inquireReservation(SqlSession sqlSession, Reservation reservation) {
		throw new ServiceException(Error.service_absent, "RTR inquireReservation()");
	}
}
