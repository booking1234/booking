/**
 * @author	abookingnet
 * @see License at http://abookingnet.com
 * @version	3.0.10
 */

package net.cbtltd.rest.rci;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import net.cbtltd.server.RazorServer;
import net.cbtltd.shared.Attribute;
import net.cbtltd.soap.ota.server.OtaException;

import org.apache.ibatis.session.SqlSession;
import org.apache.log4j.Logger;

/**
 * This class was generated by Apache CXF 2.4.0
 * 2012-06-25T11:35:28.228+02:00
 * Generated source version: 2.4.0
 * 
 * @see http://cxf.apache.org/docs/custom-transport.html
 * This can be achieved today via the Camel transport for CXF and the Camel FTP component.
 * @see http://java.dzone.com/articles/open-source-integration-apache
 * @see http://camel.apache.org/ftp.html
 * @see http://camel.apache.org/cxf.html
 * URI format

ftp://[username@]hostname[:port]/filename[?options]
sftp://[username@]hostname[:port]/filename[?options]

Where filename represents the underlying file name or directory. Can contain nested folders.
The username is currently only possible to provide in the hostname parameter.

If no username is provided then anonymous login is attempted using no password.
If no port number is provided, Camel will provide default values according to the protocol (ftp = 21, sftp = 22).

With Spring
  <route>
     <from uri="ftp://scott@localhost/public/reports?password=tiger&amp;binary=true&amp;consumer.delay=60000"/>
     <to uri="file://target/test-reports"/>
  </route>
 */
public final class _Test {

//	private static final QName SERVICE_NAME = new QName("https://connect.bookt.com/svc/rest.svc", "ConnectREST");
	private static final Logger LOG = Logger.getLogger(_Test.class.getName());
	private static final String APIKEY = "89eea03e-b659-474f-9fd3-8ab86240651b";
	private static final ObjectFactory OF = new ObjectFactory();
	private static final DateFormat DF = new SimpleDateFormat("yyyyMMMdd");
	
	private _Test() {
	}

	public static void main(String args[]) throws Exception {
//		URL wsdlURL = ConnectREST.WSDL_LOCATION;
//		if (args.length > 0) { 
//			File wsdlFile = new File(args[0]);
//			try {
//				if (wsdlFile.exists()) {
//					wsdlURL = wsdlFile.toURI().toURL();
//				} else {
//					wsdlURL = new URL(args[0]);
//				}
//			} catch (MalformedURLException e) {
//				e.printStackTrace();
//			}
//		}
//
//		ConnectREST ss = new ConnectREST(wsdlURL, SERVICE_NAME);
//		IConnectREST port = ss.getIConnectREST();  
//		JAXBContext context = JAXBContext.newInstance(ObjectFactory.class);
		Date timestamp = new Date();
		String message = "KigoRest downloadProperties";
		LOG.debug(message);
		SqlSession sqlSession = RazorServer.openSession();

		if (false) {
			System.out.println("Invoking getLead...");
			String rq = "";
			Boolean useInternalID = true;
//			Person rs = port.getLead(APIKEY, rq, useInternalID);
//			Party party = getParty(sqlSession, rs);
//			System.out.println("getLead.rs=" + rs + "\n" + party);
		}

		System.exit(0);
	}

//	private static final Booking getBooking(SqlSession sqlSession, String reservationid) {
//		Reservation reservation = sqlSession.getMapper(ReservationMapper.class).read(reservationid);
//		Booking booking = OF.createBooking();
//		booking.setAltID(OF.createString(reservation.getId()));
//		booking.setBookedBy(OF.createPerson(getPerson(sqlSession, reservation.getAgentid())));
//		booking.setCheckIn(getXGC(reservation.getFromdate()));
//		booking.setCheckOut(getXGC(reservation.getTodate()));
//		CreditCard cc = OF.createCreditCard();
//		
//		if (reservation.hasFinanceid()) {
//			Finance finance = sqlSession.getMapper(FinanceMapper.class).read(reservation.getFinanceid());
//			if (finance != null) {
//				cc.setCardNumber(OF.createString(finance.getAccountnumber()));
//				cc.setExpiresOn(getXGC(finance.getExpires()));
//				cc.setNameOnCard(OF.createString(finance.getName()));
//				cc.setSecurityCode(OF.createString(finance.getCode()));
//				cc.setType(OF.createString(finance.getType()));
//				booking.setCreditCard(OF.createCreditCard(cc));
//			}
//		}
//		
//		booking.setID(Integer.valueOf(reservation.getId())); //TODO map
//		booking.setNumAdults(reservation.getAdult());
//		booking.setNumChildren(reservation.getChild());
//		//? TODO booking.setPaymentTerms(value);
//		booking.setPrivateNotes(OF.createString(reservation.getNotes()));
//		booking.setPropertyID(Integer.valueOf(reservation.getProductid())); //TODO: map
//		booking.setRenter(OF.createPerson(getPerson(sqlSession, reservation.getCustomerid())));
//		booking.setStatement(OF.createBookingStatement(getStatement(sqlSession, reservation)));
//		booking.setStatus(OF.createString(reservation.getState())); //TODO map
//		//? TODO booking.setTotalDueNow(value);
//		//? booking.setType(value);
//		//TODO: map booking.setUnitID(reservation.getUnit());
//		return booking;
//	}
//	
//	private static final Location getLocation(SqlSession sqlSession, Location action) {
//		Location exists = sqlSession.getMapper(LocationMapper.class).name(action);
//		if (exists != null) {
//			if (exists.noLatLng()) {
//				exists.setLatitude(action.getLatitude());
//				exists.setLongitude(action.getLongitude());
//			}
//			return exists;
//		}
//		sqlSession.getMapper(LocationMapper.class).create(action);
//		return action;
//	}
//	
//	private static final Party getParty(SqlSession sqlSession, Person person) {
//		Party party = new Party();
//		party.setPostaladdress(person.getAddress1().getValue()
//				+ "\n" + person.getAddress2().getValue()
//				+ "\n" + person.getCity().getValue()
//				+ "\n" + person.getState().getValue());
//		party.setMobilephone(person.getCellPhone().getValue());
//		party.setCountry(person.getCountry().getValue());
//		person.getCompany().getValue();
//		party.setFaxphone(person.getFaxNumber().getValue());
//		party.setName(person.getLastName().getValue(), person.getFirstName().getValue());
//		person.getGreeting().getValue();
//		party.setNightphone(person.getHomePhone().getValue());
//		//TODO: map person.getID().intValue();
//		person.getInitial().getValue();
//		party.setLatitude(person.getLatitude().doubleValue());
//		party.setLongitude(person.getLongitude().doubleValue());
//		//TODO: person.getLeadSource().getValue();
//		party.setNotes(person.getNotes().getValue());
//		party.setPostalcode(person.getPostalCode().getValue());
//		//?person.getPrefix().getValue();
//		party.setEmailaddress(person.getPrimaryEmail().getValue());
//		//?person.getStatus().getValue();
//		//?person.getSuffix().getValue();
//		Collection<String> tags = person.getTags().getValue().getString();
//		//?person.getTitle().getValue();
//		//TODO: mapperson.getType().getValue();
//		party.setWebaddress(person.getWebSite().getValue());
//		party.setDayphone(person.getWorkPhone().getValue());
//		//TODO Check if exists
//		sqlSession.getMapper(PartyMapper.class).create(party);
//		return party;
//	}
//	
//	private static final Person getPerson(SqlSession sqlSession, String partyid) {
//		Party party = sqlSession.getMapper(PartyMapper.class).read(partyid);
//		
//		Person person = OF.createPerson();
//		person.setAddress1(OF.createString(party.getPostaladdress(0)));
//		person.setAddress2(OF.createString(party.getPostaladdress(1)));
//		person.setAltID(OF.createString(party.getId()));
//		person.setCellPhone(OF.createString(party.getMobilephone()));
//		person.setCity(OF.createString(party.getPostaladdress(2)));
//		person.setCompany(OF.createString(party.getEmployerid()));
//		person.setCountry(OF.createString(party.getCountry()));
//		person.setFaxNumber(OF.createString(party.getFaxphone()));
//		person.setFirstName(OF.createString(party.getFirstName()));
//		//? person.setGreeting(OF.createString(party.getGreeting()));
//		person.setHomePhone(OF.createString(party.getNightphone()));
//		person.setID(Integer.valueOf(party.getId()));
//		//?person.setInitial(OF.createString(party.getInitial()));
//		person.setLastName(OF.createString(party.getFamilyName()));
//		person.setLatitude(getBigDecimal(party.getLatitude()));
//		person.setLongitude(getBigDecimal(party.getLongitude()));
//		person.setLeadSource(OF.createString(party.getCreatorid()));
//		person.setNotes(OF.createString(party.getNotes())); //use text
//		person.setPostalCode(OF.createString(party.getPostalcode()));
//		//?person.setPrefix(OF.createString(party.getPrefix()));
//		//?person.setPrimaryEmail(OF.createString(party.getId()));
//		//?person.setState(OF.createString(party.getRegion()));
//		person.setStatus(OF.createString(party.getState()));
//		//?person.setSuffix(OF.createString(party.getSuffix()));
//		ArrayOfstring tags = OF.createArrayOfstring();
//		//TODO tags
//		person.setTags(OF.createArrayOfstring(tags));
//		//?person.setTitle(OF.createString(party.getTitle()));
//		person.setType(OF.createString(party.getType())); //TODO: map
//		person.setWebSite(OF.createString(party.getWebaddress()));
//		person.setWorkPhone(OF.createString(party.getDayphone()));
//		return person;
//	}
//	
//	private static final Product getProduct(SqlSession sqlSession, Property rs) {
//		
//		Product product= new Product();
//		sqlSession.getMapper(ProductMapper.class).create(product);
//		product.setAltitude(0.0);
//		//? product.setAttributes(attributes);
//		//? product.setBaby(rs.getBaby());
//		//? product.setChild(child);
//		product.setCode(rs.getAltID().toString());
//		// ?product.setCommission(commission);
//		
//		Country country = sqlSession.getMapper(CountryMapper.class).read(rs.getCountry().getValue());
//		product.setCurrency(country == null ? Currency.Code.USD.name() : country.getCurrency());
//		//? product.setDiscount(discount);
//		ArrayOfMedia arrayofmedia = rs.getImages().getValue();
//		List<Media> media = arrayofmedia.getMedia();
//		if (media != null && !media.isEmpty()) {
//			ArrayList<String> images = new ArrayList<String>();
//			for (Media medium : media) {
//				images.add(medium.getMediumURL().getValue());
//				//TODO: upload image with caption
//				medium.getCaption();
//			}
//			product.setImages(images);
//		}
//		
//		product.setLatitude(getDouble(rs.getLatitude()));
//		product.setLongitude(getDouble(rs.getLongitude()));
//		product.setName(NameId.Type.Product.name() + product.getId());
//		
//		Location location = new Location();
//		location.setCountry(rs.getCountry().getValue());
//		location.setName(rs.getCity().getValue());
//		location.setAltitude(0.0);
//		location.setLatitude(product.getLatitude());
//		location.setLongitude(product.getLongitude());
//		location.setOrganizationid(HasUrls.BOOKT_PARTY);
//		location.setRegion(Region.ALL);
//		location.setState(Location.CREATED);
//		location = getLocation(sqlSession, location);
//		System.out.println("Location " + location);
//		product.setLocationid(location.getIata()); //get locationid from city
//		
//		//? product.setOwnerid(ownerid);
//		product.setPhysicaladdress(rs.getAddress1()
//				+ "\n" + rs.getAddress2()
//				+ "\n" + rs.getCity()
//				+ "\n" + rs.getState().getValue());
//		
//		product.setPerson(rs.getSleeps().intValue());
//		Text description = new Text(product.getPublicId(), product.getName(), Text.Type.HTML, new Date(), rs.getDescription().getValue(), Language.EN); //Assumes EN
//		System.out.println("description " + description);
//		Text checkin = new Text(product.getCheckinId(), product.getName(), Text.Type.HTML, new Date(), rs.getCheckInInstructions().getValue(), Language.EN); //Assumes EN
//		System.out.println("checkin " + description);
//
//		product.setPublicText(description); // does nothing
//		product.setCheckinText(checkin); // does nothing
//		product.setRating(0);
//		product.setRoom(rs.getBedrooms().intValue());
//		product.setState(Location.SUSPENDED);
//		product.setSupplierid(HasUrls.BOOKT_PARTY);
//		//? product.setTax(tax);
//		//? product.setTaxes(taxes);
//		product.setType(Product.Type.Accommodation.name());
//		product.setUnit(net.cbtltd.shared.Unit.DAY);
//		
//		ArrayOfUnit anitarray = rs.getUnits().getValue();
//		List<Unit> units = anitarray.getUnit();
//		for (Unit unit : units) {
//			unit.getID();
//			unit.getPropertyUnitID();
//			unit.getUnitName();
//		}
//		ArrayOfstring amenityarray = rs.getAmenities().getValue();
//		List<String> amenities = amenityarray.getString();
//		
//		StringBuilder sb = new StringBuilder();
//		sb.append(rs.getSummary().getValue());
//		sb.append("\nNumber of Stories: ").append(rs.getStories().intValue());
//		sb.append("\nProperty Amenities ").append(rs.getAmenities().getValue().getString());
//		sb.append("\nProperty Tags ").append(rs.getTags().getValue().getString());
//		sb.append("\nYear Property Built ").append(rs.getYearBuilt().intValue());
//		sb.append("\nProperty Type ").append(rs.getType().getValue());
//		sb.append("\nProperty Units ").append(rs.getUnits().getValue().getUnit());
//		System.out.println(sb.toString());
//		//? product.setWebaddress(webaddress);
//		//TODO Check if exists
//		sqlSession.getMapper(ProductMapper.class).update(product);
//		//TODO use ProductService.update or create?
//		return product;
//	}
//	
//	private static final Rate getRate(SqlSession sqlSession, Review review) {
//		Rate rate = new Rate();
//		rate.setId(review.getAltID().getValue());
//		Party customer = getParty(sqlSession, review.getReviewedBy().getValue());
//		rate.setCustomerid(customer.getId());
//		rate.setProductid(review.getReviewedEntityID().getValue());
//		rate.setQuantity(review.getRating());
//		rate.setType(review.getType().getValue());
//		return rate;
//	}
//	
//	private static final Statement getStatement (SqlSession sqlSession, Reservation reservation) {
//		Statement statement = null;
//		ArrayList<EventJournal> eventjournals = sqlSession.getMapper(EventMapper.class).listbyreservation(reservation);
//		if (eventjournals != null && !eventjournals.isEmpty()) {
//			statement = OF.createStatement();
//			statement.setCurrency(OF.createString(reservation.getCurrency()));
//			statement.setDescription(OF.createString("TODO"));
//			ArrayOfStatementDetail details = OF.createArrayOfStatementDetail();
//			List<StatementDetail> sds = details.getStatementDetail();
//			StatementDetail sd = OF.createStatementDetail();
//			sds.add(sd);
//			for (EventJournal eventjournal : eventjournals) {
//				sd.setAmount(getBigDecimal(eventjournal.getAmount()));
//				sd.setCurrency(OF.createString(eventjournal.getCurrency()));
//				sd.setNotes(OF.createString(eventjournal.getDescription()));
//				sd.setQuantity(getBigDecimal(eventjournal.getQuantity()));
//				sd.setType(OF.createString(eventjournal.getProcess())); //TODO: map
//			}
//			statement.setDetails(OF.createStatementDetails(details));
//		}
//		return statement;
//	}
	
	/**
	 * Gets the xGC.
	 *
	 * @return the xGC
	 */
	protected static final XMLGregorianCalendar getXGC () {
		return getXGC(new Date());
	}

	/**
	 * Gets the xGC.
	 *
	 * @param date the date
	 * @return the xGC
	 */
	protected static final XMLGregorianCalendar getXGC (Date date) {
		XMLGregorianCalendar xgc = null;
		try {
			xgc = DatatypeFactory.newInstance().newXMLGregorianCalendar();
			Calendar cal = Calendar.getInstance();
			cal.setTime(date);
			xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
			xgc.setMonth(cal.get(Calendar.MONTH)+1); // +1 because XMLGregorianCalendar is from 1 to 12 while Calendar.MONTH is from 0 to 11 !!!
			xgc.setYear(cal.get(Calendar.YEAR));
			xgc.setTime(cal.get(Calendar.HOUR_OF_DAY), cal.get(Calendar.MINUTE), cal.get(Calendar.SECOND));
			//GregorianCalendar c = xgc.toGregorianCalendar();
			//Date fecha = c.getTime();
			//java.sql.Date fechaSQL = new java.sql.Date(fecha.getTime());
		} 
		catch (DatatypeConfigurationException e) {throw new OtaException("Date_Format_Invalid", Attribute.ERR_INVALID_DATE_FORMAT, Attribute.EWT_INVALID_DATE_FORMAT);}
		return xgc;
	}

	/**
	 * Gets the xGC.
	 *
	 * @param xgcstring the xgcstring
	 * @return the xGC
	 */
	protected static final XMLGregorianCalendar getXGC(String xgcstring) { //source in XGC format
		try {return DatatypeFactory.newInstance().newXMLGregorianCalendar(xgcstring);}
		catch (DatatypeConfigurationException e) {throw new OtaException("Date_Format_Invalid", Attribute.ERR_INVALID_DATE_FORMAT, Attribute.EWT_INVALID_DATE_FORMAT);}
	}

	/**
	 * Gets the date.
	 *
	 * @param xgc the xgc
	 * @return the date
	 */
	protected static final Date getDate(XMLGregorianCalendar xgc) {
		if (xgc == null) {return null;}
		return xgc.toGregorianCalendar().getTime();
	}

	/**
	 * Gets the date.
	 *
	 * @param xgcstring the xgcstring
	 * @return the date
	 */
	protected static final Date getDate(String xgcstring) {
		return getDate(getXGC(xgcstring));
	}

	/**
	 * Gets the date.
	 *
	 * @param date the date
	 * @return the date
	 */
	protected static final String getDate(Date date) {
		if (date == null) {return null;}
		else {return getXGC(date).toXMLFormat();}
	}

	/**
	 * Gets the big integer.
	 *
	 * @param value the value
	 * @return the big integer
	 */
	protected static BigInteger getBigInteger(String value) {
		if (value == null) {return null;}
		else {return new BigInteger(value);}
	}

	/**
	 * Gets the big integer.
	 *
	 * @param value the value
	 * @return the big integer
	 */
	protected static BigInteger getBigInteger(Integer value) {
		if (value == null) {return null;}
		else {return new BigInteger(String.valueOf(value));}
	}

	/**
	 * Gets the integer.
	 *
	 * @param value the value
	 * @return the integer
	 */
	protected static Integer getInteger(BigInteger value) {
		if (value == null) {return null;}
		else {return Integer.valueOf(value.toString());}
	}

	/**
	 * Gets the big decimal.
	 *
	 * @param value the value
	 * @return the big decimal
	 */
	protected static BigDecimal getBigDecimal(String value) {
		if (value == null) {return null;}
		else {return new BigDecimal(value);}
	}

	/**
	 * Gets the big decimal.
	 *
	 * @param value the value
	 * @return the big decimal
	 */
	protected static BigDecimal getBigDecimal(Double value) {
		if (value == null) {return null;}
		else {return new BigDecimal(String.valueOf(value));}
	}

	/**
	 * Gets the double.
	 *
	 * @param value the value
	 * @return the double
	 */
	protected static Double getDouble(BigDecimal value) {
		if (value == null) {return null;}
		else {return Double.valueOf(value.toString());}
	}

	/**
	 * Gets the date time.
	 *
	 * @param xgc the xgc
	 * @return the date time
	 */
	protected static Date getDateTime(XMLGregorianCalendar xgc) {
		if (xgc == null) {return null;}
		else {return xgc.toGregorianCalendar().getTime();}
	}

	/**
	 * Gets the time.
	 *
	 * @param xgc the xgc
	 * @return the time
	 */
	protected static String getTime(XMLGregorianCalendar xgc) {
		if (xgc == null) {return null;}
		else {return xgc.toGregorianCalendar().getTime().toString();}
	}
}
