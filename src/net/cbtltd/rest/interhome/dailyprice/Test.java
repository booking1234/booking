package net.cbtltd.rest.interhome.dailyprice;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;

import net.cbtltd.server.RazorServer;
import net.cbtltd.server.ServiceException;
import net.cbtltd.server.api.PriceMapper;
import net.cbtltd.server.api.ProductMapper;
import net.cbtltd.server.project.PartyIds;
import net.cbtltd.shared.Currency;
import net.cbtltd.shared.Error;
import net.cbtltd.shared.NameId;
import net.cbtltd.shared.Product;
import net.cbtltd.shared.Unit;
import net.cbtltd.shared.api.HasUrls;

import org.apache.ibatis.session.SqlSession;

/**
 * This class was generated by Apache CXF 2.4.0
 * 2012-08-09T13:20:11.648+02:00
 * Generated source version: 2.4.0
 * 
 */
public final class Test {

	private Test() {}

	public static void main(String args[]) throws Exception {
		SqlSession sqlSession = RazorServer.openSession();
		try {
			JAXBContext jc = JAXBContext.newInstance("net.cbtltd.rest.interhome.price");
			Unmarshaller um = jc.createUnmarshaller();
			
			Prices prices = (Prices) um.unmarshal(new java.io.FileInputStream( "C:/price_0505_eur.xml" ));

			int i = 0;
			for (Price price : prices.getPrice()) {
				System.out.println(i++ + " " + price);
				Product product = sqlSession.getMapper(ProductMapper.class).altread(new NameId(PartyIds.PARTY_INTERHOME_ID, price.getCode()));
				if (product == null) {throw new ServiceException(Error.product_id, price.getCode());}

				net.cbtltd.shared.Price action = new net.cbtltd.shared.Price();
				action.setName(NameId.Type.Reservation.name());
				action.setType(NameId.Type.Reservation.name());
				action.setEntitytype(NameId.Type.Product.name());
				action.setEntityid(product.getId());
				action.setPartyid(PartyIds.PARTY_INTERHOME_ID); //TODO
				action.setState(net.cbtltd.shared.Price.CREATED);
				action.setDate(price.getStartdate().toGregorianCalendar().getTime());
				action.setTodate(price.getEnddate().toGregorianCalendar().getTime());
				net.cbtltd.shared.Price exists = sqlSession.getMapper(PriceMapper.class).exists(action);
				if (exists == null) {sqlSession.getMapper(PriceMapper.class).create(action);}
				else {action = exists;}
//				price.getFixprice();
//				price.getMaxrentalprice();
//				price.getMidweekrentalprice();
				action.setMinimum(price.getMinrentalprice().doubleValue());
				action.setValue(price.getRentalprice().doubleValue());
				action.setCurrency(Currency.Code.EUR.name());
				action.setQuantity(0.0);
				action.setUnit(Unit.WEE);
//				price.getWeekendrentalprice();
				
				for (Service service : price.getServices().getService()) {
					service.getCode();
					service.getServiceprice();
				}
				
				Specialoffer specialoffer = price.getSpecialoffer();
				if (specialoffer != null ) {
					specialoffer.getCode();
					specialoffer.getSpecialofferprice();
				}
				
				sqlSession.getMapper(PriceMapper.class).update(action);
				System.out.println(action);
				sqlSession.commit();
				//if (i > 100)break;
			}
		} catch (Throwable x) {x.printStackTrace();}

		System.out.println("Finished...");
		System.exit(0);
	}
}
