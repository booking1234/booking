package net.cbtltd.rest.interhome.vacancy;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.util.Date;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;

import net.cbtltd.rest.Constants;
import net.cbtltd.server.RazorServer;
import net.cbtltd.server.ServiceException;
import net.cbtltd.server.api.ProductMapper;
import net.cbtltd.server.api.ReservationMapper;
import net.cbtltd.server.project.PartyIds;
import net.cbtltd.shared.Error;
import net.cbtltd.shared.NameId;
import net.cbtltd.shared.Party;
import net.cbtltd.shared.Product;
import net.cbtltd.shared.Reservation;
import net.cbtltd.shared.Time;
import net.cbtltd.shared.Unit;
import net.cbtltd.shared.api.HasUrls;

import org.apache.ibatis.session.SqlSession;

/**
 * This class was generated by Apache CXF 2.4.0
 * 2012-08-09T13:20:11.648+02:00
 * Generated source version: 2.4.0
 * 
 */
public final class _Test {

	private _Test() {}

	public static void main(String args[]) throws Exception {
		SqlSession sqlSession = RazorServer.openSession();
		try {
			JAXBContext jc = JAXBContext.newInstance("net.cbtltd.rest.interhome.vacancy");
			Unmarshaller um = jc.createUnmarshaller();
			
			Vacancies vacancies = (Vacancies) um.unmarshal(new java.io.FileInputStream( "C:/vacancy.xml" ));

			Reservation reservation = new Reservation();
			reservation.setActorid(Party.NO_ACTOR);
			reservation.setAgentid(PartyIds.PARTY_INTERHOME_ID);
			reservation.setOrganizationid(PartyIds.PARTY_INTERHOME_ID);
			reservation.setState(Reservation.State.Closed.name());
			reservation.setUnit(Unit.DAY);
			
			int i = 1;
			for (Vacancy vacancy : vacancies.getVacancy()) {
				Product product = sqlSession.getMapper(ProductMapper.class).altread(new NameId(PartyIds.PARTY_INTERHOME_ID, vacancy.getCode()));
				if (product == null) {throw new ServiceException(Error.product_id, vacancy.getCode());}
				String availabilities = vacancy.getAvailability();
				String changeovers = vacancy.getChangeover();
				String flexbookings = vacancy.getFlexbooking();
				String minstays = vacancy.getMinstay();
				System.out.println(i++ + " " + vacancy.getStartday() + " " + availabilities);
				System.out.print(".");
				reservation.setProductid(product.getId());
				Date startdate = vacancy.getStartday().toGregorianCalendar().getTime();
				reservation.setDate(startdate);
				sqlSession.getMapper(ReservationMapper.class).remove(reservation);
				Date fromdate = null;
				Date todate = null;
				for (int index = 0; index < availabilities.length(); index++) {
					
					char availability = availabilities.charAt(index);
					char changeover = changeovers.charAt(index);
					char flexbooking = flexbookings.charAt(index);
					char minstay = minstays.charAt(index);
					//TODO: booking rules
					if (fromdate == null && (availability == 'N' || availability == 'Q')) {fromdate = Time.addDuration(startdate, index, Time.DAY);}
					else if (fromdate != null && availability == 'Y') {
						todate = Time.addDuration(startdate, index, Time.DAY);
						reservation.setFromdate(fromdate);
						reservation.setTodate(todate);
						reservation.setName(Constants.formatDate(startdate) + "-" + index);
						sqlSession.getMapper(ReservationMapper.class).create(reservation);
						fromdate = null;
					}
				}
				//sqlSession.commit();
				if (i++%100 == 0) System.out.println(i/100);
				if (i > 100) break;
			}
		} catch (Throwable x) {x.printStackTrace();}

		System.out.println("Finished...");
		System.exit(0);
	}
}
