
package net.cbtltd.rest.interhome.salesoffice;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.util.Date;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;

import net.cbtltd.server.RazorServer;
import net.cbtltd.server.RelationService;
import net.cbtltd.server.ServiceException;
import net.cbtltd.server.TextService;
import net.cbtltd.server.api.CountryMapper;
import net.cbtltd.server.api.FinanceMapper;
import net.cbtltd.server.api.LocationMapper;
import net.cbtltd.server.api.PartyMapper;
import net.cbtltd.server.project.PartyIds;
import net.cbtltd.shared.Country;
import net.cbtltd.shared.Error;
import net.cbtltd.shared.Finance;
import net.cbtltd.shared.Language;
import net.cbtltd.shared.Location;
import net.cbtltd.shared.Model;
import net.cbtltd.shared.NameId;
import net.cbtltd.shared.Party;
import net.cbtltd.shared.Relation;
import net.cbtltd.shared.Text;
import net.cbtltd.shared.Unit;
import net.cbtltd.shared.api.HasUrls;

import org.apache.ibatis.session.SqlSession;

/**
 * This class was generated by Apache CXF 2.4.0
 * 2012-08-09T13:20:11.648+02:00
 * Generated source version: 2.4.0
 * 
 */
public final class _Test {

	private _Test() {}

	public static void main(String args[]) throws Exception {
		SqlSession sqlSession = RazorServer.openSession();
		try {
			JAXBContext jc = JAXBContext.newInstance("net.cbtltd.rest.interhome.salesoffice");
			Unmarshaller um = jc.createUnmarshaller();
			
			Salesoffices salesoffices = (Salesoffices) um.unmarshal(new java.io.FileInputStream( "C:/salesoffice.xml" ));

			int i = 0;
			for (Salesoffice salesoffice : salesoffices.getSalesoffice()) {
				System.out.println(i++ + " " + salesoffice);
				Party party = getParty(sqlSession, salesoffice.getCode(), PartyIds.PARTY_INTERHOME_ID);
				StringBuilder sb = new StringBuilder();
				if (salesoffice.getAddress1() != null && !salesoffice.getAddress1().isEmpty()) {sb.append(salesoffice.getAddress1());}
				if (salesoffice.getAddress2() != null && !salesoffice.getAddress2().isEmpty()) {sb.append("\n").append(salesoffice.getAddress2());}
				if (salesoffice.getStreet() != null && !salesoffice.getStreet().isEmpty()) {sb.append("\n").append(salesoffice.getStreet());}
				if (salesoffice.getPlace() != null && !salesoffice.getPlace().isEmpty()) {sb.append("\n").append(salesoffice.getPlace());}
				if (salesoffice.getZip() != null && !salesoffice.getZip().isEmpty()) {sb.append("\n").append(salesoffice.getZip());}
				party.setPostaladdress(sb.toString());
				
				Bank bank = salesoffice.getBank();
				Finance finance = new Finance();
				finance.setName(bank.getName());
				finance.setOwnerid(party.getId());
				Finance exists = sqlSession.getMapper(FinanceMapper.class).exists(finance);
				if (exists == null) {sqlSession.getMapper(FinanceMapper.class).create(finance);}
				else {finance = exists;}
				finance.setAccountnumber(Model.encrypt(bank.getAccountnumber()));
				finance.setBranchnumber(Model.encrypt(bank.getBankcode()));
				if (bank.getIban() != null && !bank.getIban().isEmpty()) {finance.setIbanswift(Model.encrypt(bank.getIban()));}
				else if (bank.getSwift() != null && !bank.getSwift().isEmpty()) {finance.setIbanswift(Model.encrypt(bank.getSwift()));}
				
				for (Cancellationcondition cancellationcondition : salesoffice.getCancellationconditions().getCancellationcondition()) {
					cancellationcondition.getDaysbefore();
					cancellationcondition.getPercent();
				}
				
				party.setCountry(salesoffice.getCountry());
				Country country = sqlSession.getMapper(CountryMapper.class).read(salesoffice.getCountry());
				party.setCurrency(country.getCurrency());
				party.setLanguage(country.getLanguage());
				party.setEmailaddress(salesoffice.getEmail());
				party.setFaxphone(salesoffice.getFax());
				party.setName(salesoffice.getName() + " " + country.getName());
				party.setDayphone(salesoffice.getPhone());
				party.setCity(salesoffice.getPlace());
				party.setPostalcode(salesoffice.getZip());

				party.setCreatorid(Party.CBT_LTD_PARTY);
				party.setEmployerid(party.getId());
				party.setPassword(Model.encrypt(Party.PASSWORD));
				party.setRank(0);
				party.setUnit(Unit.DAY);
				
				//TODO:
				for (Payment payment : salesoffice.getPayments().getPayment()) {
					payment.getDaysbefore();
					payment.getMode();
					payment.getType();
				}
				
				sqlSession.getMapper(PartyMapper.class).update(party);

				party.setContractText(new Text(party.getContractId(), party.getName(), Text.Type.HTML, new Date(), salesoffice.getTermsandconditions(), Language.EN));
				TextService.update(sqlSession, party.getTexts());
				
				sqlSession.commit();
			}
		} catch (Throwable x) {x.printStackTrace();}

		System.out.println("Finished...");
		System.exit(0);
	}

	/**
	 * Gets the party or creates it if it does not exist.
	 *
* @param sqlSession the current SQL session.
	 * @param altid the foreign ID
	 * @param organizationid the organizationid
	 * @return the party
	 */
	private static Party getParty(SqlSession sqlSession, String altid, String organizationid) {
		Party party = sqlSession.getMapper(PartyMapper.class).altread(new NameId(PartyIds.PARTY_INTERHOME_ID, altid));
		if (party == null) {
			if (organizationid == null || organizationid.isEmpty()) {throw new ServiceException(Error.party_id, altid);}
			party = new Party();
			sqlSession.getMapper(PartyMapper.class).create(party);
			party.setAltpartyid(PartyIds.PARTY_INTERHOME_ID);
			party.setAltid(altid);
			party.setState(Party.CREATED);
			party.setOrganizationid(PartyIds.PARTY_INTERHOME_ID); //TODO: use sales office
			sqlSession.getMapper(PartyMapper.class).update(party);
			RelationService.create(sqlSession, Relation.ORG_PARTY_ + Party.Type.Organization.name(), party.getId(), party.getId());
			RelationService.create(sqlSession, Relation.ORG_PARTY_ + Party.Type.Organization.name(), organizationid, party.getId());
		}
		return party;
	}

	/**
	 * Gets the location.
	 *
* @param sqlSession the current SQL session.
	 * @param action the action
	 * @return the location
	 */
	private static final Location getLocation(SqlSession sqlSession, Location action) {
		Location exists = sqlSession.getMapper(LocationMapper.class).name(action);
		if (exists != null) {
			return exists;
		}
		sqlSession.getMapper(LocationMapper.class).create(action);
		return action;
	}

}
