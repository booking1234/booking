
package net.cbtltd.rest.interhome.countryregionplace;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;

import net.cbtltd.server.RazorServer;
import net.cbtltd.server.ServiceException;
import net.cbtltd.server.api.CountryMapper;
import net.cbtltd.server.api.LocationMapper;
import net.cbtltd.server.api.RegionMapper;
import net.cbtltd.shared.Error;
import net.cbtltd.shared.Location;
import net.cbtltd.shared.Region;

import org.apache.ibatis.session.SqlSession;

/**
 * This class was generated by Apache CXF 2.4.0
 * 2012-08-09T13:20:11.648+02:00
 * Generated source version: 2.4.0
 * 
 */
public final class Test {

	private Test() {}

	public static void main(String args[]) throws Exception {
		SqlSession sqlSession = RazorServer.openSession();
		try {
			JAXBContext jc = JAXBContext.newInstance("net.cbtltd.rest.interhome.countryregionplace");
			//Create unmarshaller
			Unmarshaller um = jc.createUnmarshaller();
			Countries countries = (Countries) um.unmarshal(new java.io.FileInputStream( "C:/countryregionplace_en.xml" ));
			int i = 0;
			for (Country country : countries.getCountry()) {
				if (sqlSession.getMapper(CountryMapper.class).read(country.getCode()) == null) {throw new ServiceException(Error.country_code, country.getCode());}
				
				Location location = new Location();
				location.setCountry(country.getCode());
				
				for (RegionType region : country.getRegions().getRegion()) {
					System.out.println(i++ + " " + country + "\n" + region);
					Region action = new Region();
					action.setId(region.getCode());
					action.setName(region.getName());
					action.setCountry(country.getCode());
					Region exists = sqlSession.getMapper(RegionMapper.class).name(action);
					if (exists == null) {
						try {
							sqlSession.getMapper(RegionMapper.class).create(action);
							sqlSession.commit();
						} catch(Throwable x){}
					}
					else {action = exists;}
					if (region.getPlaces() != null && region.getPlaces().getPlace() != null) {
					for (PlaceType place: region.getPlaces().getPlace()) {
						location.setName(place.getName());
						location.setCode(place.getCode());
						location.setRegion(action.getId());
						location.setState(Location.CREATED);
						location.setNotes("Interhome " + place.getName() + " " + place.getCode());
						location = getLocation(sqlSession, location);
						sqlSession.commit();
					}
				}
				}
			}
		} catch (Throwable x) {x.printStackTrace();}

		System.out.println("Finished...");
		System.exit(0);
	}

	/**
	 * Gets the location.
	 *
* @param sqlSession the current SQL session.
	 * @param action the action
	 * @return the location
	 */
	private static final Location getLocation(SqlSession sqlSession, Location action) {
		Location exists = sqlSession.getMapper(LocationMapper.class).name(action);
		if (exists != null) {
			if (exists.noLatLng()) {
				exists.setLatitude(action.getLatitude());
				exists.setLongitude(action.getLongitude());
			}
			exists.setCode(action.getCode());
			sqlSession.getMapper(LocationMapper.class).update(exists);
			return exists;
		}
		sqlSession.getMapper(LocationMapper.class).create(action);
		return action;
	}

}
